# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from rscapi.models.high_level_match import HighLevelMatch  # noqa: E501

class TestHighLevelMatch(unittest.TestCase):
    """HighLevelMatch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> HighLevelMatch:
        """Test HighLevelMatch
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `HighLevelMatch`
        """
        model = HighLevelMatch()  # noqa: E501
        if include_optional:
            return HighLevelMatch(
                day = 56,
                var_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                game_name = '0',
                game_pass = '0',
                num_games = 56,
                match_format = 'GMS',
                match_type = 'REG',
                home_team = rscapi.models.team.Team(
                    id = 56, 
                    name = '0', 
                    franchise = '0', 
                    tier = '0', 
                    players = [
                        rscapi.models.player.Player(
                            id = 56, 
                            name = '0', 
                            status = '0', 
                            captain = True, 
                            base_mmr = 56, 
                            current_mmr = 56, 
                            last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            discord_id = 56, )
                        ], 
                    latest_season = 56, ),
                away_team = rscapi.models.team.Team(
                    id = 56, 
                    name = '0', 
                    franchise = '0', 
                    tier = '0', 
                    players = [
                        rscapi.models.player.Player(
                            id = 56, 
                            name = '0', 
                            status = '0', 
                            captain = True, 
                            base_mmr = 56, 
                            current_mmr = 56, 
                            last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            discord_id = 56, )
                        ], 
                    latest_season = 56, ),
                id = 56,
                results = rscapi.models.list_match_results.ListMatchResults(
                    home_wins = 56, 
                    away_wins = 56, 
                    games = [
                        rscapi.models.list_games.ListGames(
                            winner = '0', 
                            replay_id = '', 
                            stats = '', )
                        ], )
            )
        else:
            return HighLevelMatch(
                home_team = rscapi.models.team.Team(
                    id = 56, 
                    name = '0', 
                    franchise = '0', 
                    tier = '0', 
                    players = [
                        rscapi.models.player.Player(
                            id = 56, 
                            name = '0', 
                            status = '0', 
                            captain = True, 
                            base_mmr = 56, 
                            current_mmr = 56, 
                            last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            discord_id = 56, )
                        ], 
                    latest_season = 56, ),
                away_team = rscapi.models.team.Team(
                    id = 56, 
                    name = '0', 
                    franchise = '0', 
                    tier = '0', 
                    players = [
                        rscapi.models.player.Player(
                            id = 56, 
                            name = '0', 
                            status = '0', 
                            captain = True, 
                            base_mmr = 56, 
                            current_mmr = 56, 
                            last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            discord_id = 56, )
                        ], 
                    latest_season = 56, ),
                results = rscapi.models.list_match_results.ListMatchResults(
                    home_wins = 56, 
                    away_wins = 56, 
                    games = [
                        rscapi.models.list_games.ListGames(
                            winner = '0', 
                            replay_id = '', 
                            stats = '', )
                        ], ),
        )
        """

    def testHighLevelMatch(self):
        """Test HighLevelMatch"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
