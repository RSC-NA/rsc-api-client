# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from rscapi.models.league_player import LeaguePlayer
from rscapi.models.member import Member
from rscapi.models.member_tracker import MemberTracker
from rscapi.models.members_list200_response import MembersList200Response
from rscapi.models.player_season_stats import PlayerSeasonStats

from rscapi.api_client import ApiClient
from rscapi.api_response import ApiResponse
from rscapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class MembersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def members_accounts(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], **kwargs) -> MemberTracker:  # noqa: E501
        ...

    @overload
    def members_accounts(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], async_req: Optional[bool]=True, **kwargs) -> MemberTracker:  # noqa: E501
        ...

    @validate_arguments
    def members_accounts(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], async_req: Optional[bool]=None, **kwargs) -> Union[MemberTracker, Awaitable[MemberTracker]]:  # noqa: E501
        """members_accounts  # noqa: E501

        Get accounts for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.members_accounts(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this user. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MemberTracker
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the members_accounts_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.members_accounts_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def members_accounts_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], **kwargs) -> ApiResponse:  # noqa: E501
        """members_accounts  # noqa: E501

        Get accounts for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.members_accounts_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this user. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MemberTracker, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_accounts" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Api-Key']  # noqa: E501

        _response_types_map = {
            '200': "MemberTracker",
        }

        return self.api_client.call_api(
            '/members/{id}/accounts/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def members_contract_status(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], league : Annotated[StrictInt, Field(..., description="League ID to get player contract status of")], **kwargs) -> LeaguePlayer:  # noqa: E501
        ...

    @overload
    def members_contract_status(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], league : Annotated[StrictInt, Field(..., description="League ID to get player contract status of")], async_req: Optional[bool]=True, **kwargs) -> LeaguePlayer:  # noqa: E501
        ...

    @validate_arguments
    def members_contract_status(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], league : Annotated[StrictInt, Field(..., description="League ID to get player contract status of")], async_req: Optional[bool]=None, **kwargs) -> Union[LeaguePlayer, Awaitable[LeaguePlayer]]:  # noqa: E501
        """members_contract_status  # noqa: E501

        GET /member/{id}/contract_status/  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.members_contract_status(id, league, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this user. (required)
        :type id: int
        :param league: League ID to get player contract status of (required)
        :type league: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: LeaguePlayer
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the members_contract_status_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.members_contract_status_with_http_info(id, league, **kwargs)  # noqa: E501

    @validate_arguments
    def members_contract_status_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], league : Annotated[StrictInt, Field(..., description="League ID to get player contract status of")], **kwargs) -> ApiResponse:  # noqa: E501
        """members_contract_status  # noqa: E501

        GET /member/{id}/contract_status/  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.members_contract_status_with_http_info(id, league, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this user. (required)
        :type id: int
        :param league: League ID to get player contract status of (required)
        :type league: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(LeaguePlayer, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'league'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_contract_status" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('league') is not None:  # noqa: E501
            _query_params.append(('league', _params['league']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Api-Key']  # noqa: E501

        _response_types_map = {
            '200': "LeaguePlayer",
            '400': "Error",
            '404': "Error",
        }

        return self.api_client.call_api(
            '/members/{id}/contract_status/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def members_list(self, rsc_name : Annotated[Optional[StrictStr], Field(description="rsc_name")] = None, discord_username : Annotated[Optional[StrictStr], Field(description="discord_username")] = None, discord_id : Annotated[Optional[StrictInt], Field(description="Discord ID of member to search for")] = None, limit : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, offset : Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None, **kwargs) -> MembersList200Response:  # noqa: E501
        ...

    @overload
    def members_list(self, rsc_name : Annotated[Optional[StrictStr], Field(description="rsc_name")] = None, discord_username : Annotated[Optional[StrictStr], Field(description="discord_username")] = None, discord_id : Annotated[Optional[StrictInt], Field(description="Discord ID of member to search for")] = None, limit : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, offset : Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None, async_req: Optional[bool]=True, **kwargs) -> MembersList200Response:  # noqa: E501
        ...

    @validate_arguments
    def members_list(self, rsc_name : Annotated[Optional[StrictStr], Field(description="rsc_name")] = None, discord_username : Annotated[Optional[StrictStr], Field(description="discord_username")] = None, discord_id : Annotated[Optional[StrictInt], Field(description="Discord ID of member to search for")] = None, limit : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, offset : Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[MembersList200Response, Awaitable[MembersList200Response]]:  # noqa: E501
        """members_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.members_list(rsc_name, discord_username, discord_id, limit, offset, async_req=True)
        >>> result = thread.get()

        :param rsc_name: rsc_name
        :type rsc_name: str
        :param discord_username: discord_username
        :type discord_username: str
        :param discord_id: Discord ID of member to search for
        :type discord_id: int
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MembersList200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the members_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.members_list_with_http_info(rsc_name, discord_username, discord_id, limit, offset, **kwargs)  # noqa: E501

    @validate_arguments
    def members_list_with_http_info(self, rsc_name : Annotated[Optional[StrictStr], Field(description="rsc_name")] = None, discord_username : Annotated[Optional[StrictStr], Field(description="discord_username")] = None, discord_id : Annotated[Optional[StrictInt], Field(description="Discord ID of member to search for")] = None, limit : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, offset : Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """members_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.members_list_with_http_info(rsc_name, discord_username, discord_id, limit, offset, async_req=True)
        >>> result = thread.get()

        :param rsc_name: rsc_name
        :type rsc_name: str
        :param discord_username: discord_username
        :type discord_username: str
        :param discord_id: Discord ID of member to search for
        :type discord_id: int
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MembersList200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'rsc_name',
            'discord_username',
            'discord_id',
            'limit',
            'offset'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('rsc_name') is not None:  # noqa: E501
            _query_params.append(('rsc_name', _params['rsc_name']))

        if _params.get('discord_username') is not None:  # noqa: E501
            _query_params.append(('discord_username', _params['discord_username']))

        if _params.get('discord_id') is not None:  # noqa: E501
            _query_params.append(('discord_id', _params['discord_id']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Api-Key']  # noqa: E501

        _response_types_map = {
            '200': "MembersList200Response",
        }

        return self.api_client.call_api(
            '/members/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def members_postseason_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], league : Annotated[StrictInt, Field(..., description="League to get stats from season for.")], season : Annotated[Optional[StrictInt], Field(description="Specific season number to get stats for")] = None, **kwargs) -> PlayerSeasonStats:  # noqa: E501
        ...

    @overload
    def members_postseason_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], league : Annotated[StrictInt, Field(..., description="League to get stats from season for.")], season : Annotated[Optional[StrictInt], Field(description="Specific season number to get stats for")] = None, async_req: Optional[bool]=True, **kwargs) -> PlayerSeasonStats:  # noqa: E501
        ...

    @validate_arguments
    def members_postseason_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], league : Annotated[StrictInt, Field(..., description="League to get stats from season for.")], season : Annotated[Optional[StrictInt], Field(description="Specific season number to get stats for")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[PlayerSeasonStats, Awaitable[PlayerSeasonStats]]:  # noqa: E501
        """members_postseason_stats  # noqa: E501

        Get postseason stats for a player.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.members_postseason_stats(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this user. (required)
        :type id: int
        :param league: League to get stats from season for. (required)
        :type league: int
        :param season: Specific season number to get stats for
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PlayerSeasonStats
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the members_postseason_stats_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.members_postseason_stats_with_http_info(id, league, season, **kwargs)  # noqa: E501

    @validate_arguments
    def members_postseason_stats_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], league : Annotated[StrictInt, Field(..., description="League to get stats from season for.")], season : Annotated[Optional[StrictInt], Field(description="Specific season number to get stats for")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """members_postseason_stats  # noqa: E501

        Get postseason stats for a player.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.members_postseason_stats_with_http_info(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this user. (required)
        :type id: int
        :param league: League to get stats from season for. (required)
        :type league: int
        :param season: Specific season number to get stats for
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PlayerSeasonStats, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'league',
            'season'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_postseason_stats" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('season') is not None:  # noqa: E501
            _query_params.append(('season', _params['season']))

        if _params.get('league') is not None:  # noqa: E501
            _query_params.append(('league', _params['league']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Api-Key']  # noqa: E501

        _response_types_map = {
            '200': "PlayerSeasonStats",
            '403': "Error",
        }

        return self.api_client.call_api(
            '/members/{id}/postseason_stats/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def members_read(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], **kwargs) -> Member:  # noqa: E501
        ...

    @overload
    def members_read(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], async_req: Optional[bool]=True, **kwargs) -> Member:  # noqa: E501
        ...

    @validate_arguments
    def members_read(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], async_req: Optional[bool]=None, **kwargs) -> Union[Member, Awaitable[Member]]:  # noqa: E501
        """members_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.members_read(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this user. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Member
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the members_read_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.members_read_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def members_read_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], **kwargs) -> ApiResponse:  # noqa: E501
        """members_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.members_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this user. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Member, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_read" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Api-Key']  # noqa: E501

        _response_types_map = {
            '200': "Member",
        }

        return self.api_client.call_api(
            '/members/{id}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def members_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], league : Annotated[StrictInt, Field(..., description="League to get stats from season for.")], season : Annotated[Optional[StrictInt], Field(description="Specific season number to get stats for")] = None, **kwargs) -> PlayerSeasonStats:  # noqa: E501
        ...

    @overload
    def members_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], league : Annotated[StrictInt, Field(..., description="League to get stats from season for.")], season : Annotated[Optional[StrictInt], Field(description="Specific season number to get stats for")] = None, async_req: Optional[bool]=True, **kwargs) -> PlayerSeasonStats:  # noqa: E501
        ...

    @validate_arguments
    def members_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], league : Annotated[StrictInt, Field(..., description="League to get stats from season for.")], season : Annotated[Optional[StrictInt], Field(description="Specific season number to get stats for")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[PlayerSeasonStats, Awaitable[PlayerSeasonStats]]:  # noqa: E501
        """members_stats  # noqa: E501

        Get regular season stats for a player.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.members_stats(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this user. (required)
        :type id: int
        :param league: League to get stats from season for. (required)
        :type league: int
        :param season: Specific season number to get stats for
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PlayerSeasonStats
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the members_stats_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.members_stats_with_http_info(id, league, season, **kwargs)  # noqa: E501

    @validate_arguments
    def members_stats_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this user.")], league : Annotated[StrictInt, Field(..., description="League to get stats from season for.")], season : Annotated[Optional[StrictInt], Field(description="Specific season number to get stats for")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """members_stats  # noqa: E501

        Get regular season stats for a player.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.members_stats_with_http_info(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this user. (required)
        :type id: int
        :param league: League to get stats from season for. (required)
        :type league: int
        :param season: Specific season number to get stats for
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PlayerSeasonStats, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'league',
            'season'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method members_stats" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('season') is not None:  # noqa: E501
            _query_params.append(('season', _params['season']))

        if _params.get('league') is not None:  # noqa: E501
            _query_params.append(('league', _params['league']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Api-Key']  # noqa: E501

        _response_types_map = {
            '200': "PlayerSeasonStats",
            '403': "Error",
        }

        return self.api_client.call_api(
            '/members/{id}/stats/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
