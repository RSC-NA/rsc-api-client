# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from pydantic import Field, StrictBytes, StrictInt, StrictStr

from typing import List, Optional, Union

from rscapi.models.franchise import Franchise
from rscapi.models.franchise_list import FranchiseList
from rscapi.models.transfer_franchise import TransferFranchise

from rscapi.api_client import ApiClient
from rscapi.api_response import ApiResponse
from rscapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class FranchisesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def franchises_create(self, data : FranchiseList, **kwargs) -> FranchiseList:  # noqa: E501
        ...

    @overload
    def franchises_create(self, data : FranchiseList, async_req: Optional[bool]=True, **kwargs) -> FranchiseList:  # noqa: E501
        ...

    @validate_arguments
    def franchises_create(self, data : FranchiseList, async_req: Optional[bool]=None, **kwargs) -> Union[FranchiseList, Awaitable[FranchiseList]]:  # noqa: E501
        """franchises_create  # noqa: E501

        Viewset for the franchise model. Contains endpoints related to working with franchises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_create(data, async_req=True)
        >>> result = thread.get()

        :param data: (required)
        :type data: FranchiseList
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FranchiseList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the franchises_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.franchises_create_with_http_info(data, **kwargs)  # noqa: E501

    @validate_arguments
    def franchises_create_with_http_info(self, data : FranchiseList, **kwargs) -> ApiResponse:  # noqa: E501
        """franchises_create  # noqa: E501

        Viewset for the franchise model. Contains endpoints related to working with franchises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param data: (required)
        :type data: FranchiseList
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FranchiseList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method franchises_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Api-Key']  # noqa: E501

        _response_types_map = {
            '201': "FranchiseList",
        }

        return self.api_client.call_api(
            '/franchises/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def franchises_delete(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], **kwargs) -> None:  # noqa: E501
        ...

    @overload
    def franchises_delete(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], async_req: Optional[bool]=True, **kwargs) -> None:  # noqa: E501
        ...

    @validate_arguments
    def franchises_delete(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], async_req: Optional[bool]=None, **kwargs) -> Union[None, Awaitable[None]]:  # noqa: E501
        """franchises_delete  # noqa: E501

        Viewset for the franchise model. Contains endpoints related to working with franchises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_delete(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this franchise. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the franchises_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.franchises_delete_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def franchises_delete_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], **kwargs) -> ApiResponse:  # noqa: E501
        """franchises_delete  # noqa: E501

        Viewset for the franchise model. Contains endpoints related to working with franchises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this franchise. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method franchises_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['Api-Key']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/franchises/{id}/', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def franchises_list(self, prefix : Annotated[Optional[StrictStr], Field(description="prefix")] = None, league : Annotated[Optional[StrictInt], Field(description="League Database ID")] = None, gm_name : Annotated[Optional[StrictStr], Field(description="gm_name")] = None, name : Annotated[Optional[StrictStr], Field(description="name")] = None, tier : Annotated[Optional[StrictStr], Field(description="tier")] = None, tier_name : Annotated[Optional[StrictStr], Field(description="tier_name")] = None, **kwargs) -> List[FranchiseList]:  # noqa: E501
        ...

    @overload
    def franchises_list(self, prefix : Annotated[Optional[StrictStr], Field(description="prefix")] = None, league : Annotated[Optional[StrictInt], Field(description="League Database ID")] = None, gm_name : Annotated[Optional[StrictStr], Field(description="gm_name")] = None, name : Annotated[Optional[StrictStr], Field(description="name")] = None, tier : Annotated[Optional[StrictStr], Field(description="tier")] = None, tier_name : Annotated[Optional[StrictStr], Field(description="tier_name")] = None, async_req: Optional[bool]=True, **kwargs) -> List[FranchiseList]:  # noqa: E501
        ...

    @validate_arguments
    def franchises_list(self, prefix : Annotated[Optional[StrictStr], Field(description="prefix")] = None, league : Annotated[Optional[StrictInt], Field(description="League Database ID")] = None, gm_name : Annotated[Optional[StrictStr], Field(description="gm_name")] = None, name : Annotated[Optional[StrictStr], Field(description="name")] = None, tier : Annotated[Optional[StrictStr], Field(description="tier")] = None, tier_name : Annotated[Optional[StrictStr], Field(description="tier_name")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[FranchiseList], Awaitable[List[FranchiseList]]]:  # noqa: E501
        """franchises_list  # noqa: E501

        Viewset for the franchise model. Contains endpoints related to working with franchises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_list(prefix, league, gm_name, name, tier, tier_name, async_req=True)
        >>> result = thread.get()

        :param prefix: prefix
        :type prefix: str
        :param league: League Database ID
        :type league: int
        :param gm_name: gm_name
        :type gm_name: str
        :param name: name
        :type name: str
        :param tier: tier
        :type tier: str
        :param tier_name: tier_name
        :type tier_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[FranchiseList]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the franchises_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.franchises_list_with_http_info(prefix, league, gm_name, name, tier, tier_name, **kwargs)  # noqa: E501

    @validate_arguments
    def franchises_list_with_http_info(self, prefix : Annotated[Optional[StrictStr], Field(description="prefix")] = None, league : Annotated[Optional[StrictInt], Field(description="League Database ID")] = None, gm_name : Annotated[Optional[StrictStr], Field(description="gm_name")] = None, name : Annotated[Optional[StrictStr], Field(description="name")] = None, tier : Annotated[Optional[StrictStr], Field(description="tier")] = None, tier_name : Annotated[Optional[StrictStr], Field(description="tier_name")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """franchises_list  # noqa: E501

        Viewset for the franchise model. Contains endpoints related to working with franchises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_list_with_http_info(prefix, league, gm_name, name, tier, tier_name, async_req=True)
        >>> result = thread.get()

        :param prefix: prefix
        :type prefix: str
        :param league: League Database ID
        :type league: int
        :param gm_name: gm_name
        :type gm_name: str
        :param name: name
        :type name: str
        :param tier: tier
        :type tier: str
        :param tier_name: tier_name
        :type tier_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[FranchiseList], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'prefix',
            'league',
            'gm_name',
            'name',
            'tier',
            'tier_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method franchises_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('prefix') is not None:  # noqa: E501
            _query_params.append(('prefix', _params['prefix']))

        if _params.get('league') is not None:  # noqa: E501
            _query_params.append(('league', _params['league']))

        if _params.get('gm_name') is not None:  # noqa: E501
            _query_params.append(('gm_name', _params['gm_name']))

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('tier') is not None:  # noqa: E501
            _query_params.append(('tier', _params['tier']))

        if _params.get('tier_name') is not None:  # noqa: E501
            _query_params.append(('tier_name', _params['tier_name']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Api-Key']  # noqa: E501

        _response_types_map = {
            '200': "List[FranchiseList]",
        }

        return self.api_client.call_api(
            '/franchises/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def franchises_partial_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], data : FranchiseList, **kwargs) -> FranchiseList:  # noqa: E501
        ...

    @overload
    def franchises_partial_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], data : FranchiseList, async_req: Optional[bool]=True, **kwargs) -> FranchiseList:  # noqa: E501
        ...

    @validate_arguments
    def franchises_partial_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], data : FranchiseList, async_req: Optional[bool]=None, **kwargs) -> Union[FranchiseList, Awaitable[FranchiseList]]:  # noqa: E501
        """franchises_partial_update  # noqa: E501

        Viewset for the franchise model. Contains endpoints related to working with franchises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this franchise. (required)
        :type id: int
        :param data: (required)
        :type data: FranchiseList
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FranchiseList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the franchises_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.franchises_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def franchises_partial_update_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], data : FranchiseList, **kwargs) -> ApiResponse:  # noqa: E501
        """franchises_partial_update  # noqa: E501

        Viewset for the franchise model. Contains endpoints related to working with franchises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this franchise. (required)
        :type id: int
        :param data: (required)
        :type data: FranchiseList
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FranchiseList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method franchises_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Api-Key']  # noqa: E501

        _response_types_map = {
            '200': "FranchiseList",
        }

        return self.api_client.call_api(
            '/franchises/{id}/', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def franchises_read(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], **kwargs) -> Franchise:  # noqa: E501
        ...

    @overload
    def franchises_read(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], async_req: Optional[bool]=True, **kwargs) -> Franchise:  # noqa: E501
        ...

    @validate_arguments
    def franchises_read(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], async_req: Optional[bool]=None, **kwargs) -> Union[Franchise, Awaitable[Franchise]]:  # noqa: E501
        """franchises_read  # noqa: E501

        Viewset for the franchise model. Contains endpoints related to working with franchises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_read(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this franchise. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Franchise
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the franchises_read_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.franchises_read_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def franchises_read_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], **kwargs) -> ApiResponse:  # noqa: E501
        """franchises_read  # noqa: E501

        Viewset for the franchise model. Contains endpoints related to working with franchises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this franchise. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Franchise, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method franchises_read" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Api-Key']  # noqa: E501

        _response_types_map = {
            '200': "Franchise",
        }

        return self.api_client.call_api(
            '/franchises/{id}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def franchises_transfer_franchise(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], data : TransferFranchise, **kwargs) -> TransferFranchise:  # noqa: E501
        ...

    @overload
    def franchises_transfer_franchise(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], data : TransferFranchise, async_req: Optional[bool]=True, **kwargs) -> TransferFranchise:  # noqa: E501
        ...

    @validate_arguments
    def franchises_transfer_franchise(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], data : TransferFranchise, async_req: Optional[bool]=None, **kwargs) -> Union[TransferFranchise, Awaitable[TransferFranchise]]:  # noqa: E501
        """franchises_transfer_franchise  # noqa: E501

        PUT /franchises/{id}/transfer_franchise/  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_transfer_franchise(id, data, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this franchise. (required)
        :type id: int
        :param data: (required)
        :type data: TransferFranchise
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TransferFranchise
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the franchises_transfer_franchise_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.franchises_transfer_franchise_with_http_info(id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def franchises_transfer_franchise_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], data : TransferFranchise, **kwargs) -> ApiResponse:  # noqa: E501
        """franchises_transfer_franchise  # noqa: E501

        PUT /franchises/{id}/transfer_franchise/  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_transfer_franchise_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this franchise. (required)
        :type id: int
        :param data: (required)
        :type data: TransferFranchise
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TransferFranchise, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method franchises_transfer_franchise" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Api-Key']  # noqa: E501

        _response_types_map = {
            '200': "TransferFranchise",
        }

        return self.api_client.call_api(
            '/franchises/{id}/transfer_franchise/', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def franchises_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], data : FranchiseList, **kwargs) -> FranchiseList:  # noqa: E501
        ...

    @overload
    def franchises_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], data : FranchiseList, async_req: Optional[bool]=True, **kwargs) -> FranchiseList:  # noqa: E501
        ...

    @validate_arguments
    def franchises_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], data : FranchiseList, async_req: Optional[bool]=None, **kwargs) -> Union[FranchiseList, Awaitable[FranchiseList]]:  # noqa: E501
        """franchises_update  # noqa: E501

        Viewset for the franchise model. Contains endpoints related to working with franchises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_update(id, data, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this franchise. (required)
        :type id: int
        :param data: (required)
        :type data: FranchiseList
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FranchiseList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the franchises_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.franchises_update_with_http_info(id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def franchises_update_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], data : FranchiseList, **kwargs) -> ApiResponse:  # noqa: E501
        """franchises_update  # noqa: E501

        Viewset for the franchise model. Contains endpoints related to working with franchises.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this franchise. (required)
        :type id: int
        :param data: (required)
        :type data: FranchiseList
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FranchiseList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method franchises_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Api-Key']  # noqa: E501

        _response_types_map = {
            '200': "FranchiseList",
        }

        return self.api_client.call_api(
            '/franchises/{id}/', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def franchises_upload_logo(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], logo : Annotated[Union[StrictBytes, StrictStr], Field(..., description="Logo content.")], **kwargs) -> FranchiseList:  # noqa: E501
        ...

    @overload
    def franchises_upload_logo(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], logo : Annotated[Union[StrictBytes, StrictStr], Field(..., description="Logo content.")], async_req: Optional[bool]=True, **kwargs) -> FranchiseList:  # noqa: E501
        ...

    @validate_arguments
    def franchises_upload_logo(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], logo : Annotated[Union[StrictBytes, StrictStr], Field(..., description="Logo content.")], async_req: Optional[bool]=None, **kwargs) -> Union[FranchiseList, Awaitable[FranchiseList]]:  # noqa: E501
        """franchises_upload_logo  # noqa: E501

        Update a franchise logo.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_upload_logo(id, logo, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this franchise. (required)
        :type id: int
        :param logo: Logo content. (required)
        :type logo: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FranchiseList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the franchises_upload_logo_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.franchises_upload_logo_with_http_info(id, logo, **kwargs)  # noqa: E501

    @validate_arguments
    def franchises_upload_logo_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this franchise.")], logo : Annotated[Union[StrictBytes, StrictStr], Field(..., description="Logo content.")], **kwargs) -> ApiResponse:  # noqa: E501
        """franchises_upload_logo  # noqa: E501

        Update a franchise logo.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.franchises_upload_logo_with_http_info(id, logo, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this franchise. (required)
        :type id: int
        :param logo: Logo content. (required)
        :type logo: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FranchiseList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'logo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method franchises_upload_logo" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['logo']:
            _files['logo'] = _params['logo']

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Api-Key']  # noqa: E501

        _response_types_map = {
            '200': "FranchiseList",
        }

        return self.api_client.call_api(
            '/franchises/{id}/upload_logo/', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
