# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import List, Optional

from openapi_client.models.league_player import LeaguePlayer
from openapi_client.models.player_season_stats_in_depth import PlayerSeasonStatsInDepth
from openapi_client.models.team import Team
from openapi_client.models.team_season_stats import TeamSeasonStats
from openapi_client.models.tier import Tier

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TiersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def tiers_create(self, data : Tier, **kwargs) -> Tier:  # noqa: E501
        ...

    @overload
    def tiers_create(self, data : Tier, async_req: Optional[bool]=True, **kwargs) -> Tier:  # noqa: E501
        ...

    @validate_arguments
    def tiers_create(self, data : Tier, async_req: Optional[bool]=None, **kwargs) -> Union[Tier, Awaitable[Tier]]:  # noqa: E501
        """tiers_create  # noqa: E501

        Viewset for the Tier model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_create(data, async_req=True)
        >>> result = thread.get()

        :param data: (required)
        :type data: Tier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Tier
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tiers_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.tiers_create_with_http_info(data, **kwargs)  # noqa: E501

    @validate_arguments
    def tiers_create_with_http_info(self, data : Tier, **kwargs) -> ApiResponse:  # noqa: E501
        """tiers_create  # noqa: E501

        Viewset for the Tier model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param data: (required)
        :type data: Tier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Tier, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tiers_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '201': "Tier",
        }

        return self.api_client.call_api(
            '/tiers/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def tiers_delete(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], **kwargs) -> None:  # noqa: E501
        ...

    @overload
    def tiers_delete(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], async_req: Optional[bool]=True, **kwargs) -> None:  # noqa: E501
        ...

    @validate_arguments
    def tiers_delete(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], async_req: Optional[bool]=None, **kwargs) -> Union[None, Awaitable[None]]:  # noqa: E501
        """tiers_delete  # noqa: E501

        Viewset for the Tier model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_delete(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tiers_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.tiers_delete_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def tiers_delete_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], **kwargs) -> ApiResponse:  # noqa: E501
        """tiers_delete  # noqa: E501

        Viewset for the Tier model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tiers_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/tiers/{id}/', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def tiers_list(self, name : Annotated[Optional[StrictStr], Field(description="name")] = None, league : Annotated[Optional[StrictStr], Field(description="league")] = None, **kwargs) -> List[Tier]:  # noqa: E501
        ...

    @overload
    def tiers_list(self, name : Annotated[Optional[StrictStr], Field(description="name")] = None, league : Annotated[Optional[StrictStr], Field(description="league")] = None, async_req: Optional[bool]=True, **kwargs) -> List[Tier]:  # noqa: E501
        ...

    @validate_arguments
    def tiers_list(self, name : Annotated[Optional[StrictStr], Field(description="name")] = None, league : Annotated[Optional[StrictStr], Field(description="league")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[Tier], Awaitable[List[Tier]]]:  # noqa: E501
        """tiers_list  # noqa: E501

        Viewset for the Tier model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_list(name, league, async_req=True)
        >>> result = thread.get()

        :param name: name
        :type name: str
        :param league: league
        :type league: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Tier]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tiers_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.tiers_list_with_http_info(name, league, **kwargs)  # noqa: E501

    @validate_arguments
    def tiers_list_with_http_info(self, name : Annotated[Optional[StrictStr], Field(description="name")] = None, league : Annotated[Optional[StrictStr], Field(description="league")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """tiers_list  # noqa: E501

        Viewset for the Tier model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_list_with_http_info(name, league, async_req=True)
        >>> result = thread.get()

        :param name: name
        :type name: str
        :param league: league
        :type league: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Tier], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'league'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tiers_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('league') is not None:  # noqa: E501
            _query_params.append(('league', _params['league']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "List[Tier]",
        }

        return self.api_client.call_api(
            '/tiers/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def tiers_partial_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], data : Tier, **kwargs) -> Tier:  # noqa: E501
        ...

    @overload
    def tiers_partial_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], data : Tier, async_req: Optional[bool]=True, **kwargs) -> Tier:  # noqa: E501
        ...

    @validate_arguments
    def tiers_partial_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], data : Tier, async_req: Optional[bool]=None, **kwargs) -> Union[Tier, Awaitable[Tier]]:  # noqa: E501
        """tiers_partial_update  # noqa: E501

        Viewset for the Tier model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param data: (required)
        :type data: Tier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Tier
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tiers_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.tiers_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def tiers_partial_update_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], data : Tier, **kwargs) -> ApiResponse:  # noqa: E501
        """tiers_partial_update  # noqa: E501

        Viewset for the Tier model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param data: (required)
        :type data: Tier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Tier, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tiers_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "Tier",
        }

        return self.api_client.call_api(
            '/tiers/{id}/', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def tiers_player_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, **kwargs) -> List[PlayerSeasonStatsInDepth]:  # noqa: E501
        ...

    @overload
    def tiers_player_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, async_req: Optional[bool]=True, **kwargs) -> List[PlayerSeasonStatsInDepth]:  # noqa: E501
        ...

    @validate_arguments
    def tiers_player_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[PlayerSeasonStatsInDepth], Awaitable[List[PlayerSeasonStatsInDepth]]]:  # noqa: E501
        """tiers_player_stats  # noqa: E501

        Get player stats for a given tier and season in a league. (Default: Current Season)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_player_stats(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param league: League ID (required)
        :type league: int
        :param season: Season number (Default: Current season.)
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[PlayerSeasonStatsInDepth]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tiers_player_stats_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.tiers_player_stats_with_http_info(id, league, season, **kwargs)  # noqa: E501

    @validate_arguments
    def tiers_player_stats_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """tiers_player_stats  # noqa: E501

        Get player stats for a given tier and season in a league. (Default: Current Season)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_player_stats_with_http_info(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param league: League ID (required)
        :type league: int
        :param season: Season number (Default: Current season.)
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[PlayerSeasonStatsInDepth], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'league',
            'season'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tiers_player_stats" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('season') is not None:  # noqa: E501
            _query_params.append(('season', _params['season']))

        if _params.get('league') is not None:  # noqa: E501
            _query_params.append(('league', _params['league']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "List[PlayerSeasonStatsInDepth]",
        }

        return self.api_client.call_api(
            '/tiers/{id}/player_stats/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def tiers_players(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, **kwargs) -> List[LeaguePlayer]:  # noqa: E501
        ...

    @overload
    def tiers_players(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, async_req: Optional[bool]=True, **kwargs) -> List[LeaguePlayer]:  # noqa: E501
        ...

    @validate_arguments
    def tiers_players(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[LeaguePlayer], Awaitable[List[LeaguePlayer]]]:  # noqa: E501
        """tiers_players  # noqa: E501

        Get all players for a specific tier in a league  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_players(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param league: League ID (required)
        :type league: int
        :param season: Season number (Default: Current season.)
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[LeaguePlayer]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tiers_players_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.tiers_players_with_http_info(id, league, season, **kwargs)  # noqa: E501

    @validate_arguments
    def tiers_players_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """tiers_players  # noqa: E501

        Get all players for a specific tier in a league  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_players_with_http_info(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param league: League ID (required)
        :type league: int
        :param season: Season number (Default: Current season.)
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[LeaguePlayer], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'league',
            'season'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tiers_players" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('season') is not None:  # noqa: E501
            _query_params.append(('season', _params['season']))

        if _params.get('league') is not None:  # noqa: E501
            _query_params.append(('league', _params['league']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "List[LeaguePlayer]",
        }

        return self.api_client.call_api(
            '/tiers/{id}/players/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def tiers_postseason_player_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, **kwargs) -> List[PlayerSeasonStatsInDepth]:  # noqa: E501
        ...

    @overload
    def tiers_postseason_player_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, async_req: Optional[bool]=True, **kwargs) -> List[PlayerSeasonStatsInDepth]:  # noqa: E501
        ...

    @validate_arguments
    def tiers_postseason_player_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[PlayerSeasonStatsInDepth], Awaitable[List[PlayerSeasonStatsInDepth]]]:  # noqa: E501
        """tiers_postseason_player_stats  # noqa: E501

        Get player postseason stats for a given tier and season in a league. (Default: Current Season)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_postseason_player_stats(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param league: League ID (required)
        :type league: int
        :param season: Season number (Default: Current season.)
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[PlayerSeasonStatsInDepth]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tiers_postseason_player_stats_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.tiers_postseason_player_stats_with_http_info(id, league, season, **kwargs)  # noqa: E501

    @validate_arguments
    def tiers_postseason_player_stats_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """tiers_postseason_player_stats  # noqa: E501

        Get player postseason stats for a given tier and season in a league. (Default: Current Season)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_postseason_player_stats_with_http_info(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param league: League ID (required)
        :type league: int
        :param season: Season number (Default: Current season.)
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[PlayerSeasonStatsInDepth], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'league',
            'season'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tiers_postseason_player_stats" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('season') is not None:  # noqa: E501
            _query_params.append(('season', _params['season']))

        if _params.get('league') is not None:  # noqa: E501
            _query_params.append(('league', _params['league']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "List[PlayerSeasonStatsInDepth]",
        }

        return self.api_client.call_api(
            '/tiers/{id}/postseason_player_stats/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def tiers_postseason_team_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, **kwargs) -> List[TeamSeasonStats]:  # noqa: E501
        ...

    @overload
    def tiers_postseason_team_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, async_req: Optional[bool]=True, **kwargs) -> List[TeamSeasonStats]:  # noqa: E501
        ...

    @validate_arguments
    def tiers_postseason_team_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[TeamSeasonStats], Awaitable[List[TeamSeasonStats]]]:  # noqa: E501
        """tiers_postseason_team_stats  # noqa: E501

        Get postseason team stats for a given tier and season in a league. (Default: Current Season)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_postseason_team_stats(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param league: League ID (required)
        :type league: int
        :param season: Season number (Default: Current season.)
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[TeamSeasonStats]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tiers_postseason_team_stats_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.tiers_postseason_team_stats_with_http_info(id, league, season, **kwargs)  # noqa: E501

    @validate_arguments
    def tiers_postseason_team_stats_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """tiers_postseason_team_stats  # noqa: E501

        Get postseason team stats for a given tier and season in a league. (Default: Current Season)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_postseason_team_stats_with_http_info(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param league: League ID (required)
        :type league: int
        :param season: Season number (Default: Current season.)
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[TeamSeasonStats], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'league',
            'season'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tiers_postseason_team_stats" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('season') is not None:  # noqa: E501
            _query_params.append(('season', _params['season']))

        if _params.get('league') is not None:  # noqa: E501
            _query_params.append(('league', _params['league']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "List[TeamSeasonStats]",
        }

        return self.api_client.call_api(
            '/tiers/{id}/postseason_team_stats/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def tiers_read(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], **kwargs) -> Tier:  # noqa: E501
        ...

    @overload
    def tiers_read(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], async_req: Optional[bool]=True, **kwargs) -> Tier:  # noqa: E501
        ...

    @validate_arguments
    def tiers_read(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], async_req: Optional[bool]=None, **kwargs) -> Union[Tier, Awaitable[Tier]]:  # noqa: E501
        """tiers_read  # noqa: E501

        Viewset for the Tier model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_read(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Tier
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tiers_read_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.tiers_read_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def tiers_read_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], **kwargs) -> ApiResponse:  # noqa: E501
        """tiers_read  # noqa: E501

        Viewset for the Tier model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Tier, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tiers_read" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "Tier",
        }

        return self.api_client.call_api(
            '/tiers/{id}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def tiers_team_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, **kwargs) -> List[TeamSeasonStats]:  # noqa: E501
        ...

    @overload
    def tiers_team_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, async_req: Optional[bool]=True, **kwargs) -> List[TeamSeasonStats]:  # noqa: E501
        ...

    @validate_arguments
    def tiers_team_stats(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[TeamSeasonStats], Awaitable[List[TeamSeasonStats]]]:  # noqa: E501
        """tiers_team_stats  # noqa: E501

        Get team based stats for a given tier and season in a league. (Default: Current Season)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_team_stats(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param league: League ID (required)
        :type league: int
        :param season: Season number (Default: Current season.)
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[TeamSeasonStats]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tiers_team_stats_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.tiers_team_stats_with_http_info(id, league, season, **kwargs)  # noqa: E501

    @validate_arguments
    def tiers_team_stats_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """tiers_team_stats  # noqa: E501

        Get team based stats for a given tier and season in a league. (Default: Current Season)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_team_stats_with_http_info(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param league: League ID (required)
        :type league: int
        :param season: Season number (Default: Current season.)
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[TeamSeasonStats], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'league',
            'season'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tiers_team_stats" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('season') is not None:  # noqa: E501
            _query_params.append(('season', _params['season']))

        if _params.get('league') is not None:  # noqa: E501
            _query_params.append(('league', _params['league']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "List[TeamSeasonStats]",
        }

        return self.api_client.call_api(
            '/tiers/{id}/team_stats/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def tiers_teams(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, **kwargs) -> List[Team]:  # noqa: E501
        ...

    @overload
    def tiers_teams(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, async_req: Optional[bool]=True, **kwargs) -> List[Team]:  # noqa: E501
        ...

    @validate_arguments
    def tiers_teams(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[Team], Awaitable[List[Team]]]:  # noqa: E501
        """tiers_teams  # noqa: E501

        Get all teams for a specific tier in a league.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_teams(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param league: League ID (required)
        :type league: int
        :param season: Season number (Default: Current season.)
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Team]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tiers_teams_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.tiers_teams_with_http_info(id, league, season, **kwargs)  # noqa: E501

    @validate_arguments
    def tiers_teams_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], league : Annotated[StrictInt, Field(..., description="League ID")], season : Annotated[Optional[StrictInt], Field(description="Season number (Default: Current season.)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """tiers_teams  # noqa: E501

        Get all teams for a specific tier in a league.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_teams_with_http_info(id, league, season, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param league: League ID (required)
        :type league: int
        :param season: Season number (Default: Current season.)
        :type season: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Team], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'league',
            'season'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tiers_teams" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('season') is not None:  # noqa: E501
            _query_params.append(('season', _params['season']))

        if _params.get('league') is not None:  # noqa: E501
            _query_params.append(('league', _params['league']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "List[Team]",
        }

        return self.api_client.call_api(
            '/tiers/{id}/teams/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def tiers_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], data : Tier, **kwargs) -> Tier:  # noqa: E501
        ...

    @overload
    def tiers_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], data : Tier, async_req: Optional[bool]=True, **kwargs) -> Tier:  # noqa: E501
        ...

    @validate_arguments
    def tiers_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], data : Tier, async_req: Optional[bool]=None, **kwargs) -> Union[Tier, Awaitable[Tier]]:  # noqa: E501
        """tiers_update  # noqa: E501

        Viewset for the Tier model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_update(id, data, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param data: (required)
        :type data: Tier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Tier
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the tiers_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.tiers_update_with_http_info(id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def tiers_update_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this tier.")], data : Tier, **kwargs) -> ApiResponse:  # noqa: E501
        """tiers_update  # noqa: E501

        Viewset for the Tier model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tiers_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this tier. (required)
        :type id: int
        :param data: (required)
        :type data: Tier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Tier, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tiers_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key']  # noqa: E501

        _response_types_map = {
            '200': "Tier",
        }

        return self.api_client.call_api(
            '/tiers/{id}/', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
