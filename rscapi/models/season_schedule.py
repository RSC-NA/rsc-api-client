# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr

class SeasonSchedule(BaseModel):
    """
    SeasonSchedule
    """
    matches_per_season: Optional[StrictInt] = None
    matches_per_night: Optional[StrictInt] = None
    match_nights: Optional[StrictStr] = None
    __properties = ["matches_per_season", "matches_per_night", "match_nights"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SeasonSchedule:
        """Create an instance of SeasonSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "matches_per_season",
                            "matches_per_night",
                            "match_nights",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SeasonSchedule:
        """Create an instance of SeasonSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SeasonSchedule.parse_obj(obj)

        _obj = SeasonSchedule.parse_obj({
            "matches_per_season": obj.get("matches_per_season"),
            "matches_per_night": obj.get("matches_per_night"),
            "match_nights": obj.get("match_nights")
        })
        return _obj


