# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, constr, validator

class MatchList(BaseModel):
    """
    MatchList
    """
    day: Optional[StrictInt] = None
    var_date: Optional[datetime] = Field(None, alias="date")
    game_name: Optional[constr(strict=True, min_length=1)] = None
    game_pass: Optional[constr(strict=True, min_length=1)] = None
    num_games: Optional[StrictInt] = None
    match_format: StrictStr = Field(...)
    match_type: StrictStr = Field(...)
    home_team: constr(strict=True, min_length=1) = Field(...)
    away_team: constr(strict=True, min_length=1) = Field(...)
    id: Optional[StrictInt] = None
    __properties = ["day", "date", "game_name", "game_pass", "num_games", "match_format", "match_type", "home_team", "away_team", "id"]

    @validator('match_format')
    def match_format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('GMS', 'BO3', 'BO5', 'BO7'):
            raise ValueError("must be one of enum values ('GMS', 'BO3', 'BO5', 'BO7')")
        return value

    @validator('match_type')
    def match_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('REG', 'PRE', 'PST', 'FNL'):
            raise ValueError("must be one of enum values ('REG', 'PRE', 'PST', 'FNL')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MatchList:
        """Create an instance of MatchList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "day",
                            "var_date",
                            "game_name",
                            "game_pass",
                            "num_games",
                            "id",
                          },
                          exclude_none=True)
        # set to None if var_date (nullable) is None
        # and __fields_set__ contains the field
        if self.var_date is None and "var_date" in self.__fields_set__:
            _dict['date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MatchList:
        """Create an instance of MatchList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MatchList.parse_obj(obj)

        _obj = MatchList.parse_obj({
            "day": obj.get("day"),
            "var_date": obj.get("date"),
            "game_name": obj.get("game_name"),
            "game_pass": obj.get("game_pass"),
            "num_games": obj.get("num_games"),
            "match_format": obj.get("match_format"),
            "match_type": obj.get("match_type"),
            "home_team": obj.get("home_team"),
            "away_team": obj.get("away_team"),
            "id": obj.get("id")
        })
        return _obj


