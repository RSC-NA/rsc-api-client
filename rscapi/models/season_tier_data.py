# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, constr
from rscapi.models.season_schedule import SeasonSchedule

class SeasonTierData(BaseModel):
    """
    SeasonTierData
    """
    tier: constr(strict=True, min_length=1) = Field(...)
    mmr_min: Optional[StrictInt] = None
    mmr_max: Optional[StrictInt] = None
    team_cap: Optional[StrictInt] = None
    team_number: Optional[StrictInt] = None
    schedule: Optional[SeasonSchedule] = None
    __properties = ["tier", "mmr_min", "mmr_max", "team_cap", "team_number", "schedule"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SeasonTierData:
        """Create an instance of SeasonTierData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "mmr_min",
                            "mmr_max",
                            "team_cap",
                            "team_number",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SeasonTierData:
        """Create an instance of SeasonTierData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SeasonTierData.parse_obj(obj)

        _obj = SeasonTierData.parse_obj({
            "tier": obj.get("tier"),
            "mmr_min": obj.get("mmr_min"),
            "mmr_max": obj.get("mmr_max"),
            "team_cap": obj.get("team_cap"),
            "team_number": obj.get("team_number"),
            "schedule": SeasonSchedule.from_dict(obj.get("schedule")) if obj.get("schedule") is not None else None
        })
        return _obj


