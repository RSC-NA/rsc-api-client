# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist
from rscapi.models.list_games import ListGames

class ListMatchResults(BaseModel):
    """
    ListMatchResults
    """
    home_wins: Optional[StrictInt] = None
    away_wins: Optional[StrictInt] = None
    games: conlist(ListGames) = Field(...)
    __properties = ["home_wins", "away_wins", "games"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListMatchResults:
        """Create an instance of ListMatchResults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "home_wins",
                            "away_wins",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in games (list)
        _items = []
        if self.games:
            for _item in self.games:
                if _item:
                    _items.append(_item.to_dict())
            _dict['games'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListMatchResults:
        """Create an instance of ListMatchResults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListMatchResults.parse_obj(obj)

        _obj = ListMatchResults.parse_obj({
            "home_wins": obj.get("home_wins"),
            "away_wins": obj.get("away_wins"),
            "games": [ListGames.from_dict(_item) for _item in obj.get("games")] if obj.get("games") is not None else None
        })
        return _obj


