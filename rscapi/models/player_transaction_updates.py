# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from rscapi.models.league_player import LeaguePlayer
from rscapi.models.transaction_team import TransactionTeam

class PlayerTransactionUpdates(BaseModel):
    """
    PlayerTransactionUpdates
    """
    player: LeaguePlayer = Field(...)
    old_team: Optional[TransactionTeam] = Field(...)
    new_team: Optional[TransactionTeam] = Field(...)
    __properties = ["player", "old_team", "new_team"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlayerTransactionUpdates:
        """Create an instance of PlayerTransactionUpdates from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of player
        if self.player:
            _dict['player'] = self.player.to_dict()
        # override the default output from pydantic by calling `to_dict()` of old_team
        if self.old_team:
            _dict['old_team'] = self.old_team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of new_team
        if self.new_team:
            _dict['new_team'] = self.new_team.to_dict()
        # set to None if old_team (nullable) is None
        # and __fields_set__ contains the field
        if self.old_team is None and "old_team" in self.__fields_set__:
            _dict['old_team'] = None

        # set to None if new_team (nullable) is None
        # and __fields_set__ contains the field
        if self.new_team is None and "new_team" in self.__fields_set__:
            _dict['new_team'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlayerTransactionUpdates:
        """Create an instance of PlayerTransactionUpdates from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlayerTransactionUpdates.parse_obj(obj)

        _obj = PlayerTransactionUpdates.parse_obj({
            "player": LeaguePlayer.from_dict(obj.get("player")) if obj.get("player") is not None else None,
            "old_team": TransactionTeam.from_dict(obj.get("old_team")) if obj.get("old_team") is not None else None,
            "new_team": TransactionTeam.from_dict(obj.get("new_team")) if obj.get("new_team") is not None else None
        })
        return _obj


