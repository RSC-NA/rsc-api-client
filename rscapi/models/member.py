# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conint, conlist, constr
from rscapi.models.elevated_role import ElevatedRole
from rscapi.models.league_player import LeaguePlayer

class Member(BaseModel):
    """
    Member
    """
    username: constr(strict=True, max_length=100, min_length=1) = Field(...)
    rsc_id: Optional[StrictStr] = None
    elevated_roles: Optional[conlist(ElevatedRole)] = None
    player_leagues: Optional[conlist(LeaguePlayer)] = None
    rsc_name: Optional[constr(strict=True, min_length=1)] = None
    discord_id: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    __properties = ["username", "rsc_id", "elevated_roles", "player_leagues", "rsc_name", "discord_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Member:
        """Create an instance of Member from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "rsc_id",
                            "elevated_roles",
                            "player_leagues",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in elevated_roles (list)
        _items = []
        if self.elevated_roles:
            for _item in self.elevated_roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['elevated_roles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in player_leagues (list)
        _items = []
        if self.player_leagues:
            for _item in self.player_leagues:
                if _item:
                    _items.append(_item.to_dict())
            _dict['player_leagues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Member:
        """Create an instance of Member from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Member.parse_obj(obj)

        _obj = Member.parse_obj({
            "username": obj.get("username"),
            "rsc_id": obj.get("rsc_id"),
            "elevated_roles": [ElevatedRole.from_dict(_item) for _item in obj.get("elevated_roles")] if obj.get("elevated_roles") is not None else None,
            "player_leagues": [LeaguePlayer.from_dict(_item) for _item in obj.get("player_leagues")] if obj.get("player_leagues") is not None else None,
            "rsc_name": obj.get("rsc_name"),
            "discord_id": obj.get("discord_id")
        })
        return _obj


