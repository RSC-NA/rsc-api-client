# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from rscapi.models.league import League
from rscapi.models.league_player_member import LeaguePlayerMember
from rscapi.models.player_team import PlayerTeam
from rscapi.models.previous_team import PreviousTeam
from rscapi.models.tier import Tier

class LeaguePlayer(BaseModel):
    """
    LeaguePlayer
    """
    id: Optional[StrictInt] = None
    league: League = Field(...)
    status: Optional[StrictStr] = None
    season: StrictInt = Field(...)
    captain: Optional[StrictBool] = None
    base_mmr: Optional[StrictInt] = None
    current_mmr: Optional[StrictInt] = None
    contract_length: Optional[StrictInt] = None
    team: Optional[PlayerTeam] = Field(...)
    last_updated: Optional[datetime] = None
    previous_teams: Optional[conlist(PreviousTeam)] = None
    player: LeaguePlayerMember = Field(...)
    tier: Optional[Tier] = Field(...)
    sub_status: StrictInt = Field(...)
    __properties = ["id", "league", "status", "season", "captain", "base_mmr", "current_mmr", "contract_length", "team", "last_updated", "previous_teams", "player", "tier", "sub_status"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DE', 'FA', 'RO', 'IR', 'WV', 'AR', 'FR', 'BN', 'UG', 'PF', 'WC', 'WR'):
            raise ValueError("must be one of enum values ('DE', 'FA', 'RO', 'IR', 'WV', 'AR', 'FR', 'BN', 'UG', 'PF', 'WC', 'WR')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LeaguePlayer:
        """Create an instance of LeaguePlayer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "status",
                            "captain",
                            "base_mmr",
                            "current_mmr",
                            "contract_length",
                            "last_updated",
                            "previous_teams",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of league
        if self.league:
            _dict['league'] = self.league.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team
        if self.team:
            _dict['team'] = self.team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in previous_teams (list)
        _items = []
        if self.previous_teams:
            for _item in self.previous_teams:
                if _item:
                    _items.append(_item.to_dict())
            _dict['previous_teams'] = _items
        # override the default output from pydantic by calling `to_dict()` of player
        if self.player:
            _dict['player'] = self.player.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tier
        if self.tier:
            _dict['tier'] = self.tier.to_dict()
        # set to None if team (nullable) is None
        # and __fields_set__ contains the field
        if self.team is None and "team" in self.__fields_set__:
            _dict['team'] = None

        # set to None if tier (nullable) is None
        # and __fields_set__ contains the field
        if self.tier is None and "tier" in self.__fields_set__:
            _dict['tier'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LeaguePlayer:
        """Create an instance of LeaguePlayer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LeaguePlayer.parse_obj(obj)

        _obj = LeaguePlayer.parse_obj({
            "id": obj.get("id"),
            "league": League.from_dict(obj.get("league")) if obj.get("league") is not None else None,
            "status": obj.get("status"),
            "season": obj.get("season"),
            "captain": obj.get("captain"),
            "base_mmr": obj.get("base_mmr"),
            "current_mmr": obj.get("current_mmr"),
            "contract_length": obj.get("contract_length"),
            "team": PlayerTeam.from_dict(obj.get("team")) if obj.get("team") is not None else None,
            "last_updated": obj.get("last_updated"),
            "previous_teams": [PreviousTeam.from_dict(_item) for _item in obj.get("previous_teams")] if obj.get("previous_teams") is not None else None,
            "player": LeaguePlayerMember.from_dict(obj.get("player")) if obj.get("player") is not None else None,
            "tier": Tier.from_dict(obj.get("tier")) if obj.get("tier") is not None else None,
            "sub_status": obj.get("sub_status")
        })
        return _obj


