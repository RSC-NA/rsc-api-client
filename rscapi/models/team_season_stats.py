# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TeamSeasonStats(BaseModel):
    """
    TeamSeasonStats
    """ # noqa: E501
    id: Optional[StrictInt] = None
    team: Annotated[str, Field(min_length=1, strict=True)]
    type: Annotated[str, Field(min_length=1, strict=True)]
    shooting_percentage: Union[StrictFloat, StrictInt]
    win_percentage: Union[StrictFloat, StrictInt]
    goal_differential: StrictInt
    opponent_shooting_percentage: Union[StrictFloat, StrictInt]
    stats_type: Optional[StrictStr] = None
    games_played: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    games_won: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    games_lost: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    points: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    goals: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    assists: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    saves: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    shots: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    opponent_points: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    opponent_goals: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    opponent_assists: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    opponent_saves: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    opponent_shots: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    demos_inflicted: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    demos_taken: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    __properties: ClassVar[List[str]] = ["id", "team", "type", "shooting_percentage", "win_percentage", "goal_differential", "opponent_shooting_percentage", "stats_type", "games_played", "games_won", "games_lost", "points", "goals", "assists", "saves", "shots", "opponent_points", "opponent_goals", "opponent_assists", "opponent_saves", "opponent_shots", "demos_inflicted", "demos_taken"]

    @field_validator('stats_type')
    def stats_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REG', 'PST']):
            raise ValueError("must be one of enum values ('REG', 'PST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TeamSeasonStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TeamSeasonStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "team": obj.get("team"),
            "type": obj.get("type"),
            "shooting_percentage": obj.get("shooting_percentage"),
            "win_percentage": obj.get("win_percentage"),
            "goal_differential": obj.get("goal_differential"),
            "opponent_shooting_percentage": obj.get("opponent_shooting_percentage"),
            "stats_type": obj.get("stats_type"),
            "games_played": obj.get("games_played"),
            "games_won": obj.get("games_won"),
            "games_lost": obj.get("games_lost"),
            "points": obj.get("points"),
            "goals": obj.get("goals"),
            "assists": obj.get("assists"),
            "saves": obj.get("saves"),
            "shots": obj.get("shots"),
            "opponent_points": obj.get("opponent_points"),
            "opponent_goals": obj.get("opponent_goals"),
            "opponent_assists": obj.get("opponent_assists"),
            "opponent_saves": obj.get("opponent_saves"),
            "opponent_shots": obj.get("opponent_shots"),
            "demos_inflicted": obj.get("demos_inflicted"),
            "demos_taken": obj.get("demos_taken")
        })
        return _obj


