# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conint, constr, validator

class TeamSeasonStats(BaseModel):
    """
    TeamSeasonStats
    """
    id: Optional[StrictInt] = None
    team: constr(strict=True, min_length=1) = Field(...)
    type: constr(strict=True, min_length=1) = Field(...)
    shooting_percentage: Union[StrictFloat, StrictInt] = Field(...)
    win_percentage: Union[StrictFloat, StrictInt] = Field(...)
    goal_differential: StrictInt = Field(...)
    opponent_shooting_percentage: Union[StrictFloat, StrictInt] = Field(...)
    stats_type: Optional[StrictStr] = None
    games_played: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    games_won: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    games_lost: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    points: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    goals: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    assists: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    saves: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    shots: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    opponent_points: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    opponent_goals: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    opponent_assists: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    opponent_saves: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    opponent_shots: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    demos_inflicted: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    demos_taken: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = None
    __properties = ["id", "team", "type", "shooting_percentage", "win_percentage", "goal_differential", "opponent_shooting_percentage", "stats_type", "games_played", "games_won", "games_lost", "points", "goals", "assists", "saves", "shots", "opponent_points", "opponent_goals", "opponent_assists", "opponent_saves", "opponent_shots", "demos_inflicted", "demos_taken"]

    @validator('stats_type')
    def stats_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('REG', 'PST'):
            raise ValueError("must be one of enum values ('REG', 'PST')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TeamSeasonStats:
        """Create an instance of TeamSeasonStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TeamSeasonStats:
        """Create an instance of TeamSeasonStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TeamSeasonStats.parse_obj(obj)

        _obj = TeamSeasonStats.parse_obj({
            "id": obj.get("id"),
            "team": obj.get("team"),
            "type": obj.get("type"),
            "shooting_percentage": obj.get("shooting_percentage"),
            "win_percentage": obj.get("win_percentage"),
            "goal_differential": obj.get("goal_differential"),
            "opponent_shooting_percentage": obj.get("opponent_shooting_percentage"),
            "stats_type": obj.get("stats_type"),
            "games_played": obj.get("games_played"),
            "games_won": obj.get("games_won"),
            "games_lost": obj.get("games_lost"),
            "points": obj.get("points"),
            "goals": obj.get("goals"),
            "assists": obj.get("assists"),
            "saves": obj.get("saves"),
            "shots": obj.get("shots"),
            "opponent_points": obj.get("opponent_points"),
            "opponent_goals": obj.get("opponent_goals"),
            "opponent_assists": obj.get("opponent_assists"),
            "opponent_saves": obj.get("opponent_saves"),
            "opponent_shots": obj.get("opponent_shots"),
            "demos_inflicted": obj.get("demos_inflicted"),
            "demos_taken": obj.get("demos_taken")
        })
        return _obj


