# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint, constr, validator
from rscapi.models.tracker_mmr import TrackerMMR

class PlayerMMR(BaseModel):
    """
    PlayerMMR
    """
    date_pulled: datetime = Field(...)
    tracker_link: TrackerMMR = Field(...)
    threes_rating: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    threes_season_peak: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    threes_games_played: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    twos_rating: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    twos_season_peak: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    twos_games_played: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    ones_rating: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    ones_season_peak: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    ones_games_played: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    notes: Optional[constr(strict=True, min_length=1)] = None
    member: Optional[constr(strict=True, min_length=1)] = None
    type: Optional[StrictStr] = None
    rscid: Optional[constr(strict=True, min_length=1)] = None
    __properties = ["date_pulled", "tracker_link", "threes_rating", "threes_season_peak", "threes_games_played", "twos_rating", "twos_season_peak", "twos_games_played", "ones_rating", "ones_season_peak", "ones_games_played", "notes", "member", "type", "rscid"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SN', 'HS'):
            raise ValueError("must be one of enum values ('SN', 'HS')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlayerMMR:
        """Create an instance of PlayerMMR from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "member",
                            "type",
                            "rscid",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of tracker_link
        if self.tracker_link:
            _dict['tracker_link'] = self.tracker_link.to_dict()
        # set to None if threes_rating (nullable) is None
        # and __fields_set__ contains the field
        if self.threes_rating is None and "threes_rating" in self.__fields_set__:
            _dict['threes_rating'] = None

        # set to None if threes_season_peak (nullable) is None
        # and __fields_set__ contains the field
        if self.threes_season_peak is None and "threes_season_peak" in self.__fields_set__:
            _dict['threes_season_peak'] = None

        # set to None if threes_games_played (nullable) is None
        # and __fields_set__ contains the field
        if self.threes_games_played is None and "threes_games_played" in self.__fields_set__:
            _dict['threes_games_played'] = None

        # set to None if twos_rating (nullable) is None
        # and __fields_set__ contains the field
        if self.twos_rating is None and "twos_rating" in self.__fields_set__:
            _dict['twos_rating'] = None

        # set to None if twos_season_peak (nullable) is None
        # and __fields_set__ contains the field
        if self.twos_season_peak is None and "twos_season_peak" in self.__fields_set__:
            _dict['twos_season_peak'] = None

        # set to None if twos_games_played (nullable) is None
        # and __fields_set__ contains the field
        if self.twos_games_played is None and "twos_games_played" in self.__fields_set__:
            _dict['twos_games_played'] = None

        # set to None if ones_rating (nullable) is None
        # and __fields_set__ contains the field
        if self.ones_rating is None and "ones_rating" in self.__fields_set__:
            _dict['ones_rating'] = None

        # set to None if ones_season_peak (nullable) is None
        # and __fields_set__ contains the field
        if self.ones_season_peak is None and "ones_season_peak" in self.__fields_set__:
            _dict['ones_season_peak'] = None

        # set to None if ones_games_played (nullable) is None
        # and __fields_set__ contains the field
        if self.ones_games_played is None and "ones_games_played" in self.__fields_set__:
            _dict['ones_games_played'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlayerMMR:
        """Create an instance of PlayerMMR from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlayerMMR.parse_obj(obj)

        _obj = PlayerMMR.parse_obj({
            "date_pulled": obj.get("date_pulled"),
            "tracker_link": TrackerMMR.from_dict(obj.get("tracker_link")) if obj.get("tracker_link") is not None else None,
            "threes_rating": obj.get("threes_rating"),
            "threes_season_peak": obj.get("threes_season_peak"),
            "threes_games_played": obj.get("threes_games_played"),
            "twos_rating": obj.get("twos_rating"),
            "twos_season_peak": obj.get("twos_season_peak"),
            "twos_games_played": obj.get("twos_games_played"),
            "ones_rating": obj.get("ones_rating"),
            "ones_season_peak": obj.get("ones_season_peak"),
            "ones_games_played": obj.get("ones_games_played"),
            "notes": obj.get("notes"),
            "member": obj.get("member"),
            "type": obj.get("type"),
            "rscid": obj.get("rscid")
        })
        return _obj


