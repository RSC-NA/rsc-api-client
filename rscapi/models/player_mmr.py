# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from rscapi.models.tracker_mmr import TrackerMMR
from typing import Optional, Set
from typing_extensions import Self

class PlayerMMR(BaseModel):
    """
    PlayerMMR
    """ # noqa: E501
    date_pulled: datetime
    tracker_link: TrackerMMR
    threes_rating: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    threes_season_peak: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    threes_games_played: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    twos_rating: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    twos_season_peak: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    twos_games_played: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    ones_rating: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    ones_season_peak: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    ones_games_played: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    notes: Optional[StrictStr] = None
    member: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    type: Optional[StrictStr] = None
    rscid: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    psyonix_season: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["date_pulled", "tracker_link", "threes_rating", "threes_season_peak", "threes_games_played", "twos_rating", "twos_season_peak", "twos_games_played", "ones_rating", "ones_season_peak", "ones_games_played", "notes", "member", "type", "rscid", "psyonix_season"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SN', 'HS', 'DA']):
            raise ValueError("must be one of enum values ('SN', 'HS', 'DA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayerMMR from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "member",
            "type",
            "rscid",
            "psyonix_season",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tracker_link
        if self.tracker_link:
            _dict['tracker_link'] = self.tracker_link.to_dict()
        # set to None if threes_rating (nullable) is None
        # and model_fields_set contains the field
        if self.threes_rating is None and "threes_rating" in self.model_fields_set:
            _dict['threes_rating'] = None

        # set to None if threes_season_peak (nullable) is None
        # and model_fields_set contains the field
        if self.threes_season_peak is None and "threes_season_peak" in self.model_fields_set:
            _dict['threes_season_peak'] = None

        # set to None if threes_games_played (nullable) is None
        # and model_fields_set contains the field
        if self.threes_games_played is None and "threes_games_played" in self.model_fields_set:
            _dict['threes_games_played'] = None

        # set to None if twos_rating (nullable) is None
        # and model_fields_set contains the field
        if self.twos_rating is None and "twos_rating" in self.model_fields_set:
            _dict['twos_rating'] = None

        # set to None if twos_season_peak (nullable) is None
        # and model_fields_set contains the field
        if self.twos_season_peak is None and "twos_season_peak" in self.model_fields_set:
            _dict['twos_season_peak'] = None

        # set to None if twos_games_played (nullable) is None
        # and model_fields_set contains the field
        if self.twos_games_played is None and "twos_games_played" in self.model_fields_set:
            _dict['twos_games_played'] = None

        # set to None if ones_rating (nullable) is None
        # and model_fields_set contains the field
        if self.ones_rating is None and "ones_rating" in self.model_fields_set:
            _dict['ones_rating'] = None

        # set to None if ones_season_peak (nullable) is None
        # and model_fields_set contains the field
        if self.ones_season_peak is None and "ones_season_peak" in self.model_fields_set:
            _dict['ones_season_peak'] = None

        # set to None if ones_games_played (nullable) is None
        # and model_fields_set contains the field
        if self.ones_games_played is None and "ones_games_played" in self.model_fields_set:
            _dict['ones_games_played'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if psyonix_season (nullable) is None
        # and model_fields_set contains the field
        if self.psyonix_season is None and "psyonix_season" in self.model_fields_set:
            _dict['psyonix_season'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayerMMR from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date_pulled": obj.get("date_pulled"),
            "tracker_link": TrackerMMR.from_dict(obj["tracker_link"]) if obj.get("tracker_link") is not None else None,
            "threes_rating": obj.get("threes_rating"),
            "threes_season_peak": obj.get("threes_season_peak"),
            "threes_games_played": obj.get("threes_games_played"),
            "twos_rating": obj.get("twos_rating"),
            "twos_season_peak": obj.get("twos_season_peak"),
            "twos_games_played": obj.get("twos_games_played"),
            "ones_rating": obj.get("ones_rating"),
            "ones_season_peak": obj.get("ones_season_peak"),
            "ones_games_played": obj.get("ones_games_played"),
            "notes": obj.get("notes"),
            "member": obj.get("member"),
            "type": obj.get("type"),
            "rscid": obj.get("rscid"),
            "psyonix_season": obj.get("psyonix_season")
        })
        return _obj


