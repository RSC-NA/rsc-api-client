# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from rscapi.models.team_details import TeamDetails

class RebrandAFranchise(BaseModel):
    """
    Rebrand a franchise to new details.  # noqa: E501
    """
    name: StrictStr = Field(..., description="Name you would like to give the rebranded franchise.")
    prefix: StrictStr = Field(..., description="New prefix of the franchise")
    teams: conlist(TeamDetails) = Field(..., description="List of team names and their tier.")
    admin_override: Optional[StrictBool] = Field(None, description="Override any checks and approve the rebrand.")
    __properties = ["name", "prefix", "teams", "admin_override"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RebrandAFranchise:
        """Create an instance of RebrandAFranchise from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in teams (list)
        _items = []
        if self.teams:
            for _item in self.teams:
                if _item:
                    _items.append(_item.to_dict())
            _dict['teams'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RebrandAFranchise:
        """Create an instance of RebrandAFranchise from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RebrandAFranchise.parse_obj(obj)

        _obj = RebrandAFranchise.parse_obj({
            "name": obj.get("name"),
            "prefix": obj.get("prefix"),
            "teams": [TeamDetails.from_dict(_item) for _item in obj.get("teams")] if obj.get("teams") is not None else None,
            "admin_override": obj.get("admin_override")
        })
        return _obj


