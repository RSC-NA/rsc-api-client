# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conint, constr, validator

class PlayerSeasonStats(BaseModel):
    """
    PlayerSeasonStats
    """
    id: Optional[StrictInt] = None
    player: constr(strict=True, min_length=1) = Field(...)
    season: StrictInt = Field(...)
    type: constr(strict=True, min_length=1) = Field(...)
    shooting_percentage: Union[StrictFloat, StrictInt] = Field(...)
    bpm: Union[StrictFloat, StrictInt] = Field(...)
    bcpm: Union[StrictFloat, StrictInt] = Field(...)
    avg_amount: Union[StrictFloat, StrictInt] = Field(...)
    percent_zero_boost: Union[StrictFloat, StrictInt] = Field(...)
    percent_full_boost: Union[StrictFloat, StrictInt] = Field(...)
    percent_boost_0_25: Union[StrictFloat, StrictInt] = Field(...)
    percent_boost_25_50: Union[StrictFloat, StrictInt] = Field(...)
    percent_boost_50_75: Union[StrictFloat, StrictInt] = Field(...)
    percent_boost_75_100: Union[StrictFloat, StrictInt] = Field(...)
    avg_speed: StrictInt = Field(...)
    avg_powerslide_duration: Union[StrictFloat, StrictInt] = Field(...)
    avg_speed_percentage: Union[StrictFloat, StrictInt] = Field(...)
    percent_slow_speed: Union[StrictFloat, StrictInt] = Field(...)
    percent_boost_speed: Union[StrictFloat, StrictInt] = Field(...)
    percent_supersonic_speed: Union[StrictFloat, StrictInt] = Field(...)
    percent_ground: Union[StrictFloat, StrictInt] = Field(...)
    percent_low_air: Union[StrictFloat, StrictInt] = Field(...)
    percent_high_air: Union[StrictFloat, StrictInt] = Field(...)
    avg_distance_to_ball: StrictInt = Field(...)
    avg_distance_to_ball_possession: StrictInt = Field(...)
    avg_distance_to_ball_no_possession: StrictInt = Field(...)
    avg_distance_to_mates: StrictInt = Field(...)
    percent_defensive_third: Union[StrictFloat, StrictInt] = Field(...)
    percent_offensive_third: Union[StrictFloat, StrictInt] = Field(...)
    percent_neutral_third: Union[StrictFloat, StrictInt] = Field(...)
    percent_defensive_half: Union[StrictFloat, StrictInt] = Field(...)
    percent_offensive_half: Union[StrictFloat, StrictInt] = Field(...)
    percent_behind_ball: Union[StrictFloat, StrictInt] = Field(...)
    percent_infront_ball: Union[StrictFloat, StrictInt] = Field(...)
    percent_most_back: Union[StrictFloat, StrictInt] = Field(...)
    percent_most_forward: Union[StrictFloat, StrictInt] = Field(...)
    percent_closest_to_ball: Union[StrictFloat, StrictInt] = Field(...)
    percent_farthest_from_ball: Union[StrictFloat, StrictInt] = Field(...)
    stats_type: Optional[StrictStr] = None
    games_played: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    games_won: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    games_lost: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    mvps: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    shots: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    shots_against: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    goals: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    goals_against: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    saves: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    assists: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    points: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    hat_tricks: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    playmakers: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    saviors: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    goals_against_while_last_defender: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    time_powerslide: Optional[Union[StrictFloat, StrictInt]] = None
    count_powerslide: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    amount_collected: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    amount_stolen: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    amount_collected_big: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    amount_stolen_big: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    amount_collected_small: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    amount_stolen_small: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    count_collected_big: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    count_stolen_big: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    count_collected_small: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    count_stolen_small: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    amount_overfill: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    amount_overfill_stolen: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    amount_used_while_supersonic: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    time_zero_boost: Optional[Union[StrictFloat, StrictInt]] = None
    time_full_boost: Optional[Union[StrictFloat, StrictInt]] = None
    time_boost_0_25: Optional[Union[StrictFloat, StrictInt]] = None
    time_boost_25_50: Optional[Union[StrictFloat, StrictInt]] = None
    time_boost_50_75: Optional[Union[StrictFloat, StrictInt]] = None
    time_boost_75_100: Optional[Union[StrictFloat, StrictInt]] = None
    total_distance: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    time_supersonic_speed: Optional[Union[StrictFloat, StrictInt]] = None
    time_boost_speed: Optional[Union[StrictFloat, StrictInt]] = None
    time_slow_speed: Optional[Union[StrictFloat, StrictInt]] = None
    time_ground: Optional[Union[StrictFloat, StrictInt]] = None
    time_low_air: Optional[Union[StrictFloat, StrictInt]] = None
    time_high_air: Optional[Union[StrictFloat, StrictInt]] = None
    time_defensive_third: Optional[Union[StrictFloat, StrictInt]] = None
    time_neutral_third: Optional[Union[StrictFloat, StrictInt]] = None
    time_offensive_third: Optional[Union[StrictFloat, StrictInt]] = None
    time_defensive_half: Optional[Union[StrictFloat, StrictInt]] = None
    time_offensive_half: Optional[Union[StrictFloat, StrictInt]] = None
    time_behind_ball: Optional[Union[StrictFloat, StrictInt]] = None
    time_infront_ball: Optional[Union[StrictFloat, StrictInt]] = None
    time_most_back: Optional[Union[StrictFloat, StrictInt]] = None
    time_most_forward: Optional[Union[StrictFloat, StrictInt]] = None
    time_closest_to_ball: Optional[Union[StrictFloat, StrictInt]] = None
    time_farthest_from_ball: Optional[Union[StrictFloat, StrictInt]] = None
    demos_inflicted: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    demos_taken: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    raw_shooting_percentage: Optional[Union[StrictFloat, StrictInt]] = None
    raw_bpm: Optional[Union[StrictFloat, StrictInt]] = None
    raw_bcpm: Optional[Union[StrictFloat, StrictInt]] = None
    raw_avg_amount: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_zero_boost: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_full_boost: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_boost_0_25: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_boost_25_50: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_boost_50_75: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_boost_75_100: Optional[Union[StrictFloat, StrictInt]] = None
    raw_avg_speed: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    raw_avg_powerslide_duration: Optional[Union[StrictFloat, StrictInt]] = None
    raw_avg_speed_percentage: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_slow_speed: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_boost_speed: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_supersonic_speed: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_ground: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_low_air: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_high_air: Optional[Union[StrictFloat, StrictInt]] = None
    raw_avg_distance_to_ball: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    raw_avg_distance_to_ball_possession: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    raw_avg_distance_to_ball_no_possession: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    raw_avg_distance_to_mates: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    raw_percent_defensive_third: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_offensive_third: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_neutral_third: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_defensive_half: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_offensive_half: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_behind_ball: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_infront_ball: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_most_back: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_most_forward: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_closest_to_ball: Optional[Union[StrictFloat, StrictInt]] = None
    raw_percent_farthest_from_ball: Optional[Union[StrictFloat, StrictInt]] = None
    tier: StrictInt = Field(...)
    __properties = ["id", "player", "season", "type", "shooting_percentage", "bpm", "bcpm", "avg_amount", "percent_zero_boost", "percent_full_boost", "percent_boost_0_25", "percent_boost_25_50", "percent_boost_50_75", "percent_boost_75_100", "avg_speed", "avg_powerslide_duration", "avg_speed_percentage", "percent_slow_speed", "percent_boost_speed", "percent_supersonic_speed", "percent_ground", "percent_low_air", "percent_high_air", "avg_distance_to_ball", "avg_distance_to_ball_possession", "avg_distance_to_ball_no_possession", "avg_distance_to_mates", "percent_defensive_third", "percent_offensive_third", "percent_neutral_third", "percent_defensive_half", "percent_offensive_half", "percent_behind_ball", "percent_infront_ball", "percent_most_back", "percent_most_forward", "percent_closest_to_ball", "percent_farthest_from_ball", "stats_type", "games_played", "games_won", "games_lost", "mvps", "shots", "shots_against", "goals", "goals_against", "saves", "assists", "points", "hat_tricks", "playmakers", "saviors", "goals_against_while_last_defender", "time_powerslide", "count_powerslide", "amount_collected", "amount_stolen", "amount_collected_big", "amount_stolen_big", "amount_collected_small", "amount_stolen_small", "count_collected_big", "count_stolen_big", "count_collected_small", "count_stolen_small", "amount_overfill", "amount_overfill_stolen", "amount_used_while_supersonic", "time_zero_boost", "time_full_boost", "time_boost_0_25", "time_boost_25_50", "time_boost_50_75", "time_boost_75_100", "total_distance", "time_supersonic_speed", "time_boost_speed", "time_slow_speed", "time_ground", "time_low_air", "time_high_air", "time_defensive_third", "time_neutral_third", "time_offensive_third", "time_defensive_half", "time_offensive_half", "time_behind_ball", "time_infront_ball", "time_most_back", "time_most_forward", "time_closest_to_ball", "time_farthest_from_ball", "demos_inflicted", "demos_taken", "raw_shooting_percentage", "raw_bpm", "raw_bcpm", "raw_avg_amount", "raw_percent_zero_boost", "raw_percent_full_boost", "raw_percent_boost_0_25", "raw_percent_boost_25_50", "raw_percent_boost_50_75", "raw_percent_boost_75_100", "raw_avg_speed", "raw_avg_powerslide_duration", "raw_avg_speed_percentage", "raw_percent_slow_speed", "raw_percent_boost_speed", "raw_percent_supersonic_speed", "raw_percent_ground", "raw_percent_low_air", "raw_percent_high_air", "raw_avg_distance_to_ball", "raw_avg_distance_to_ball_possession", "raw_avg_distance_to_ball_no_possession", "raw_avg_distance_to_mates", "raw_percent_defensive_third", "raw_percent_offensive_third", "raw_percent_neutral_third", "raw_percent_defensive_half", "raw_percent_offensive_half", "raw_percent_behind_ball", "raw_percent_infront_ball", "raw_percent_most_back", "raw_percent_most_forward", "raw_percent_closest_to_ball", "raw_percent_farthest_from_ball", "tier"]

    @validator('stats_type')
    def stats_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('REG', 'PST'):
            raise ValueError("must be one of enum values ('REG', 'PST')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlayerSeasonStats:
        """Create an instance of PlayerSeasonStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlayerSeasonStats:
        """Create an instance of PlayerSeasonStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlayerSeasonStats.parse_obj(obj)

        _obj = PlayerSeasonStats.parse_obj({
            "id": obj.get("id"),
            "player": obj.get("player"),
            "season": obj.get("season"),
            "type": obj.get("type"),
            "shooting_percentage": obj.get("shooting_percentage"),
            "bpm": obj.get("bpm"),
            "bcpm": obj.get("bcpm"),
            "avg_amount": obj.get("avg_amount"),
            "percent_zero_boost": obj.get("percent_zero_boost"),
            "percent_full_boost": obj.get("percent_full_boost"),
            "percent_boost_0_25": obj.get("percent_boost_0_25"),
            "percent_boost_25_50": obj.get("percent_boost_25_50"),
            "percent_boost_50_75": obj.get("percent_boost_50_75"),
            "percent_boost_75_100": obj.get("percent_boost_75_100"),
            "avg_speed": obj.get("avg_speed"),
            "avg_powerslide_duration": obj.get("avg_powerslide_duration"),
            "avg_speed_percentage": obj.get("avg_speed_percentage"),
            "percent_slow_speed": obj.get("percent_slow_speed"),
            "percent_boost_speed": obj.get("percent_boost_speed"),
            "percent_supersonic_speed": obj.get("percent_supersonic_speed"),
            "percent_ground": obj.get("percent_ground"),
            "percent_low_air": obj.get("percent_low_air"),
            "percent_high_air": obj.get("percent_high_air"),
            "avg_distance_to_ball": obj.get("avg_distance_to_ball"),
            "avg_distance_to_ball_possession": obj.get("avg_distance_to_ball_possession"),
            "avg_distance_to_ball_no_possession": obj.get("avg_distance_to_ball_no_possession"),
            "avg_distance_to_mates": obj.get("avg_distance_to_mates"),
            "percent_defensive_third": obj.get("percent_defensive_third"),
            "percent_offensive_third": obj.get("percent_offensive_third"),
            "percent_neutral_third": obj.get("percent_neutral_third"),
            "percent_defensive_half": obj.get("percent_defensive_half"),
            "percent_offensive_half": obj.get("percent_offensive_half"),
            "percent_behind_ball": obj.get("percent_behind_ball"),
            "percent_infront_ball": obj.get("percent_infront_ball"),
            "percent_most_back": obj.get("percent_most_back"),
            "percent_most_forward": obj.get("percent_most_forward"),
            "percent_closest_to_ball": obj.get("percent_closest_to_ball"),
            "percent_farthest_from_ball": obj.get("percent_farthest_from_ball"),
            "stats_type": obj.get("stats_type"),
            "games_played": obj.get("games_played"),
            "games_won": obj.get("games_won"),
            "games_lost": obj.get("games_lost"),
            "mvps": obj.get("mvps"),
            "shots": obj.get("shots"),
            "shots_against": obj.get("shots_against"),
            "goals": obj.get("goals"),
            "goals_against": obj.get("goals_against"),
            "saves": obj.get("saves"),
            "assists": obj.get("assists"),
            "points": obj.get("points"),
            "hat_tricks": obj.get("hat_tricks"),
            "playmakers": obj.get("playmakers"),
            "saviors": obj.get("saviors"),
            "goals_against_while_last_defender": obj.get("goals_against_while_last_defender"),
            "time_powerslide": obj.get("time_powerslide"),
            "count_powerslide": obj.get("count_powerslide"),
            "amount_collected": obj.get("amount_collected"),
            "amount_stolen": obj.get("amount_stolen"),
            "amount_collected_big": obj.get("amount_collected_big"),
            "amount_stolen_big": obj.get("amount_stolen_big"),
            "amount_collected_small": obj.get("amount_collected_small"),
            "amount_stolen_small": obj.get("amount_stolen_small"),
            "count_collected_big": obj.get("count_collected_big"),
            "count_stolen_big": obj.get("count_stolen_big"),
            "count_collected_small": obj.get("count_collected_small"),
            "count_stolen_small": obj.get("count_stolen_small"),
            "amount_overfill": obj.get("amount_overfill"),
            "amount_overfill_stolen": obj.get("amount_overfill_stolen"),
            "amount_used_while_supersonic": obj.get("amount_used_while_supersonic"),
            "time_zero_boost": obj.get("time_zero_boost"),
            "time_full_boost": obj.get("time_full_boost"),
            "time_boost_0_25": obj.get("time_boost_0_25"),
            "time_boost_25_50": obj.get("time_boost_25_50"),
            "time_boost_50_75": obj.get("time_boost_50_75"),
            "time_boost_75_100": obj.get("time_boost_75_100"),
            "total_distance": obj.get("total_distance"),
            "time_supersonic_speed": obj.get("time_supersonic_speed"),
            "time_boost_speed": obj.get("time_boost_speed"),
            "time_slow_speed": obj.get("time_slow_speed"),
            "time_ground": obj.get("time_ground"),
            "time_low_air": obj.get("time_low_air"),
            "time_high_air": obj.get("time_high_air"),
            "time_defensive_third": obj.get("time_defensive_third"),
            "time_neutral_third": obj.get("time_neutral_third"),
            "time_offensive_third": obj.get("time_offensive_third"),
            "time_defensive_half": obj.get("time_defensive_half"),
            "time_offensive_half": obj.get("time_offensive_half"),
            "time_behind_ball": obj.get("time_behind_ball"),
            "time_infront_ball": obj.get("time_infront_ball"),
            "time_most_back": obj.get("time_most_back"),
            "time_most_forward": obj.get("time_most_forward"),
            "time_closest_to_ball": obj.get("time_closest_to_ball"),
            "time_farthest_from_ball": obj.get("time_farthest_from_ball"),
            "demos_inflicted": obj.get("demos_inflicted"),
            "demos_taken": obj.get("demos_taken"),
            "raw_shooting_percentage": obj.get("raw_shooting_percentage"),
            "raw_bpm": obj.get("raw_bpm"),
            "raw_bcpm": obj.get("raw_bcpm"),
            "raw_avg_amount": obj.get("raw_avg_amount"),
            "raw_percent_zero_boost": obj.get("raw_percent_zero_boost"),
            "raw_percent_full_boost": obj.get("raw_percent_full_boost"),
            "raw_percent_boost_0_25": obj.get("raw_percent_boost_0_25"),
            "raw_percent_boost_25_50": obj.get("raw_percent_boost_25_50"),
            "raw_percent_boost_50_75": obj.get("raw_percent_boost_50_75"),
            "raw_percent_boost_75_100": obj.get("raw_percent_boost_75_100"),
            "raw_avg_speed": obj.get("raw_avg_speed"),
            "raw_avg_powerslide_duration": obj.get("raw_avg_powerslide_duration"),
            "raw_avg_speed_percentage": obj.get("raw_avg_speed_percentage"),
            "raw_percent_slow_speed": obj.get("raw_percent_slow_speed"),
            "raw_percent_boost_speed": obj.get("raw_percent_boost_speed"),
            "raw_percent_supersonic_speed": obj.get("raw_percent_supersonic_speed"),
            "raw_percent_ground": obj.get("raw_percent_ground"),
            "raw_percent_low_air": obj.get("raw_percent_low_air"),
            "raw_percent_high_air": obj.get("raw_percent_high_air"),
            "raw_avg_distance_to_ball": obj.get("raw_avg_distance_to_ball"),
            "raw_avg_distance_to_ball_possession": obj.get("raw_avg_distance_to_ball_possession"),
            "raw_avg_distance_to_ball_no_possession": obj.get("raw_avg_distance_to_ball_no_possession"),
            "raw_avg_distance_to_mates": obj.get("raw_avg_distance_to_mates"),
            "raw_percent_defensive_third": obj.get("raw_percent_defensive_third"),
            "raw_percent_offensive_third": obj.get("raw_percent_offensive_third"),
            "raw_percent_neutral_third": obj.get("raw_percent_neutral_third"),
            "raw_percent_defensive_half": obj.get("raw_percent_defensive_half"),
            "raw_percent_offensive_half": obj.get("raw_percent_offensive_half"),
            "raw_percent_behind_ball": obj.get("raw_percent_behind_ball"),
            "raw_percent_infront_ball": obj.get("raw_percent_infront_ball"),
            "raw_percent_most_back": obj.get("raw_percent_most_back"),
            "raw_percent_most_forward": obj.get("raw_percent_most_forward"),
            "raw_percent_closest_to_ball": obj.get("raw_percent_closest_to_ball"),
            "raw_percent_farthest_from_ball": obj.get("raw_percent_farthest_from_ball"),
            "tier": obj.get("tier")
        })
        return _obj


