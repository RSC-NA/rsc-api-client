# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MatchSubmission(BaseModel):
    """
    MatchSubmission
    """ # noqa: E501
    home_team: StrictInt
    away_team: StrictInt
    day: Optional[StrictInt] = None
    match_format: StrictStr
    match_type: StrictStr
    __properties: ClassVar[List[str]] = ["home_team", "away_team", "day", "match_format", "match_type"]

    @field_validator('match_format')
    def match_format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['GMS', 'BO3', 'BO5', 'BO7']):
            raise ValueError("must be one of enum values ('GMS', 'BO3', 'BO5', 'BO7')")
        return value

    @field_validator('match_type')
    def match_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['REG', 'PRE', 'PST', 'FNL']):
            raise ValueError("must be one of enum values ('REG', 'PRE', 'PST', 'FNL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchSubmission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchSubmission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "home_team": obj.get("home_team"),
            "away_team": obj.get("away_team"),
            "day": obj.get("day"),
            "match_format": obj.get("match_format"),
            "match_type": obj.get("match_type")
        })
        return _obj


