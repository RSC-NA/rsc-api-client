# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from rscapi.models.really import Really
from typing import Optional, Set
from typing_extensions import Self

class TrackerLink(BaseModel):
    """
    TrackerLink
    """ # noqa: E501
    link: Annotated[str, Field(min_length=1, strict=True)]
    member: Optional[Really] = None
    discord_id: Optional[StrictInt] = None
    id: Optional[StrictInt] = None
    name: Optional[Annotated[str, Field(min_length=0, strict=True)]] = None
    pulls: Optional[StrictInt] = None
    platform: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    last_updated: Optional[datetime] = None
    member_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    platform_id: Optional[Annotated[str, Field(min_length=0, strict=True)]] = None
    rscid: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    __properties: ClassVar[List[str]] = ["link", "member", "discord_id", "id", "name", "pulls", "platform", "status", "last_updated", "member_name", "platform_id", "rscid"]

    @field_validator('platform')
    def platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STEAM', 'EPIC', 'XBOX', 'PS', 'SWTCH']):
            raise ValueError("must be one of enum values ('STEAM', 'EPIC', 'XBOX', 'PS', 'SWTCH')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FLD', 'INV', 'MSG', 'NEW', 'PLD', 'RPL', 'STL']):
            raise ValueError("must be one of enum values ('FLD', 'INV', 'MSG', 'NEW', 'PLD', 'RPL', 'STL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrackerLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "name",
            "pulls",
            "platform",
            "status",
            "last_updated",
            "member_name",
            "platform_id",
            "rscid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member:
            _dict['member'] = self.member.to_dict()
        # set to None if member (nullable) is None
        # and model_fields_set contains the field
        if self.member is None and "member" in self.model_fields_set:
            _dict['member'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrackerLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "link": obj.get("link"),
            "member": Really.from_dict(obj["member"]) if obj.get("member") is not None else None,
            "discord_id": obj.get("discord_id"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "pulls": obj.get("pulls"),
            "platform": obj.get("platform"),
            "status": obj.get("status"),
            "last_updated": obj.get("last_updated"),
            "member_name": obj.get("member_name"),
            "platform_id": obj.get("platform_id"),
            "rscid": obj.get("rscid")
        })
        return _obj


