# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, constr, validator

class TrackerLink(BaseModel):
    """
    TrackerLink
    """
    link: Optional[constr(strict=True, min_length=1)] = None
    rscid: constr(strict=True, min_length=1) = Field(...)
    id: Optional[StrictInt] = None
    name: constr(strict=True, min_length=0) = Field(...)
    platform: Optional[StrictStr] = None
    status: StrictStr = Field(...)
    last_updated: Optional[datetime] = None
    member_name: constr(strict=True, min_length=1) = Field(...)
    platform_id: constr(strict=True, min_length=0) = Field(...)
    __properties = ["link", "rscid", "id", "name", "platform", "status", "last_updated", "member_name", "platform_id"]

    @validator('platform')
    def platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('STEAM', 'EPIC', 'XBOX', 'PS', 'SWTCH'):
            raise ValueError("must be one of enum values ('STEAM', 'EPIC', 'XBOX', 'PS', 'SWTCH')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('NEW', 'STL', 'PLD', 'FLD'):
            raise ValueError("must be one of enum values ('NEW', 'STL', 'PLD', 'FLD')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TrackerLink:
        """Create an instance of TrackerLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "platform",
                            "last_updated",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TrackerLink:
        """Create an instance of TrackerLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TrackerLink.parse_obj(obj)

        _obj = TrackerLink.parse_obj({
            "link": obj.get("link"),
            "rscid": obj.get("rscid"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "platform": obj.get("platform"),
            "status": obj.get("status"),
            "last_updated": obj.get("last_updated"),
            "member_name": obj.get("member_name"),
            "platform_id": obj.get("platform_id")
        })
        return _obj


