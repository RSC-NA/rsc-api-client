# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist, constr
from rscapi.models.player import Player

class Team(BaseModel):
    """
    Team
    """
    id: Optional[StrictInt] = None
    name: Optional[constr(strict=True, min_length=1)] = None
    franchise: constr(strict=True, min_length=1) = Field(...)
    tier: constr(strict=True, min_length=1) = Field(...)
    players: Optional[conlist(Player)] = Field(...)
    latest_season: StrictInt = Field(...)
    __properties = ["id", "name", "franchise", "tier", "players", "latest_season"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Team:
        """Create an instance of Team from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "name",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in players (list)
        _items = []
        if self.players:
            for _item in self.players:
                if _item:
                    _items.append(_item.to_dict())
            _dict['players'] = _items
        # set to None if players (nullable) is None
        # and __fields_set__ contains the field
        if self.players is None and "players" in self.__fields_set__:
            _dict['players'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Team:
        """Create an instance of Team from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Team.parse_obj(obj)

        _obj = Team.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "franchise": obj.get("franchise"),
            "tier": obj.get("tier"),
            "players": [Player.from_dict(_item) for _item in obj.get("players")] if obj.get("players") is not None else None,
            "latest_season": obj.get("latest_season")
        })
        return _obj


