# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, conlist
from rscapi.models.season_league import SeasonLeague
from rscapi.models.season_tier_data import SeasonTierData

class Season(BaseModel):
    """
    Season
    """
    league: SeasonLeague = Field(...)
    number: Optional[StrictInt] = None
    season_tier_data: conlist(SeasonTierData) = Field(...)
    current: Optional[StrictBool] = None
    __properties = ["league", "number", "season_tier_data", "current"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Season:
        """Create an instance of Season from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "number",
                            "current",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of league
        if self.league:
            _dict['league'] = self.league.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in season_tier_data (list)
        _items = []
        if self.season_tier_data:
            for _item in self.season_tier_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['season_tier_data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Season:
        """Create an instance of Season from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Season.parse_obj(obj)

        _obj = Season.parse_obj({
            "league": SeasonLeague.from_dict(obj.get("league")) if obj.get("league") is not None else None,
            "number": obj.get("number"),
            "season_tier_data": [SeasonTierData.from_dict(_item) for _item in obj.get("season_tier_data")] if obj.get("season_tier_data") is not None else None,
            "current": obj.get("current")
        })
        return _obj


