# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from rscapi.models.player_transaction_updates import PlayerTransactionUpdates
from rscapi.models.simple_member import SimpleMember
from rscapi.models.transaction_franchise import TransactionFranchise
from typing import Optional, Set
from typing_extensions import Self

class TransactionResponse(BaseModel):
    """
    TransactionResponse
    """ # noqa: E501
    player_updates: Optional[List[Optional[PlayerTransactionUpdates]]] = None
    var_date: Optional[datetime] = Field(default=None, description="Date transaction occurred", alias="date")
    week: StrictStr
    week_no: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(default=None, description="Week no of transaction (if applicable)")
    match_day: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(default=None, description="Specific match day of the transactions.")
    type: Optional[StrictStr]
    notes: Optional[StrictStr]
    first_franchise: Optional[TransactionFranchise] = None
    second_franchise: Optional[TransactionFranchise] = None
    executor: SimpleMember
    id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["player_updates", "date", "week", "week_no", "match_day", "type", "notes", "first_franchise", "second_franchise", "executor", "id"]

    @field_validator('week')
    def week_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['OFF', 'PRE', 'PST', 'REG']):
            raise ValueError("must be one of enum values ('OFF', 'PRE', 'PST', 'REG')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NON', 'CUT', 'PKU', 'TRD', 'PTD', 'SUB', 'TMP', 'PRO', 'RLG', 'RES', 'IR', 'RET', 'WVR', 'AIR', 'IRT', 'DFT']):
            raise ValueError("must be one of enum values ('NON', 'CUT', 'PKU', 'TRD', 'PTD', 'SUB', 'TMP', 'PRO', 'RLG', 'RES', 'IR', 'RET', 'WVR', 'AIR', 'IRT', 'DFT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "var_date",
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in player_updates (list)
        _items = []
        if self.player_updates:
            for _item in self.player_updates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['player_updates'] = _items
        # override the default output from pydantic by calling `to_dict()` of first_franchise
        if self.first_franchise:
            _dict['first_franchise'] = self.first_franchise.to_dict()
        # override the default output from pydantic by calling `to_dict()` of second_franchise
        if self.second_franchise:
            _dict['second_franchise'] = self.second_franchise.to_dict()
        # override the default output from pydantic by calling `to_dict()` of executor
        if self.executor:
            _dict['executor'] = self.executor.to_dict()
        # set to None if player_updates (nullable) is None
        # and model_fields_set contains the field
        if self.player_updates is None and "player_updates" in self.model_fields_set:
            _dict['player_updates'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if first_franchise (nullable) is None
        # and model_fields_set contains the field
        if self.first_franchise is None and "first_franchise" in self.model_fields_set:
            _dict['first_franchise'] = None

        # set to None if second_franchise (nullable) is None
        # and model_fields_set contains the field
        if self.second_franchise is None and "second_franchise" in self.model_fields_set:
            _dict['second_franchise'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "player_updates": [PlayerTransactionUpdates.from_dict(_item) for _item in obj["player_updates"]] if obj.get("player_updates") is not None else None,
            "date": obj.get("date"),
            "week": obj.get("week"),
            "week_no": obj.get("week_no"),
            "match_day": obj.get("match_day"),
            "type": obj.get("type"),
            "notes": obj.get("notes"),
            "first_franchise": TransactionFranchise.from_dict(obj["first_franchise"]) if obj.get("first_franchise") is not None else None,
            "second_franchise": TransactionFranchise.from_dict(obj["second_franchise"]) if obj.get("second_franchise") is not None else None,
            "executor": SimpleMember.from_dict(obj["executor"]) if obj.get("executor") is not None else None,
            "id": obj.get("id")
        })
        return _obj


