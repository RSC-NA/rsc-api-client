# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conint, conlist, constr, validator
from rscapi.models.member import Member
from rscapi.models.player_transaction_updates import PlayerTransactionUpdates

class TransactionResponse(BaseModel):
    """
    TransactionResponse
    """
    player_updates: conlist(PlayerTransactionUpdates) = Field(...)
    var_date: Optional[datetime] = Field(None, alias="date", description="Date transaction occurred")
    week: StrictStr = Field(...)
    week_no: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = Field(None, description="Week no of transaction (if applicable)")
    match_day: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = Field(None, description="Specific match day of the transactions.")
    type: StrictStr = Field(...)
    notes: constr(strict=True, min_length=1) = Field(..., description="Notes associated with the transaction.")
    first_gm: Member = Field(...)
    second_gm: Member = Field(...)
    executor: Member = Field(...)
    __properties = ["player_updates", "date", "week", "week_no", "match_day", "type", "notes", "first_gm", "second_gm", "executor"]

    @validator('week')
    def week_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('OFF', 'PRE', 'REG'):
            raise ValueError("must be one of enum values ('OFF', 'PRE', 'REG')")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('NON', 'CUT', 'PKU', 'TRD', 'SUB', 'TMP', 'PRO', 'RLG', 'RES', 'IR', 'RET', 'WVR', 'AIR', 'DFT'):
            raise ValueError("must be one of enum values ('NON', 'CUT', 'PKU', 'TRD', 'SUB', 'TMP', 'PRO', 'RLG', 'RES', 'IR', 'RET', 'WVR', 'AIR', 'DFT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TransactionResponse:
        """Create an instance of TransactionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "var_date",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in player_updates (list)
        _items = []
        if self.player_updates:
            for _item in self.player_updates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['player_updates'] = _items
        # override the default output from pydantic by calling `to_dict()` of first_gm
        if self.first_gm:
            _dict['first_gm'] = self.first_gm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of second_gm
        if self.second_gm:
            _dict['second_gm'] = self.second_gm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of executor
        if self.executor:
            _dict['executor'] = self.executor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TransactionResponse:
        """Create an instance of TransactionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TransactionResponse.parse_obj(obj)

        _obj = TransactionResponse.parse_obj({
            "player_updates": [PlayerTransactionUpdates.from_dict(_item) for _item in obj.get("player_updates")] if obj.get("player_updates") is not None else None,
            "var_date": obj.get("date"),
            "week": obj.get("week"),
            "week_no": obj.get("week_no"),
            "match_day": obj.get("match_day"),
            "type": obj.get("type"),
            "notes": obj.get("notes"),
            "first_gm": Member.from_dict(obj.get("first_gm")) if obj.get("first_gm") is not None else None,
            "second_gm": Member.from_dict(obj.get("second_gm")) if obj.get("second_gm") is not None else None,
            "executor": Member.from_dict(obj.get("executor")) if obj.get("executor") is not None else None
        })
        return _obj


