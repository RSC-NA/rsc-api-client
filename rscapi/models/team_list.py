# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, constr
from rscapi.models.team_franchise import TeamFranchise
from rscapi.models.tier import Tier

class TeamList(BaseModel):
    """
    TeamList
    """
    id: Optional[StrictInt] = None
    name: Optional[constr(strict=True, min_length=1)] = None
    franchise: TeamFranchise = Field(...)
    tier: Optional[Tier] = Field(...)
    __properties = ["id", "name", "franchise", "tier"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TeamList:
        """Create an instance of TeamList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "name",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of franchise
        if self.franchise:
            _dict['franchise'] = self.franchise.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tier
        if self.tier:
            _dict['tier'] = self.tier.to_dict()
        # set to None if tier (nullable) is None
        # and __fields_set__ contains the field
        if self.tier is None and "tier" in self.__fields_set__:
            _dict['tier'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TeamList:
        """Create an instance of TeamList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TeamList.parse_obj(obj)

        _obj = TeamList.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "franchise": TeamFranchise.from_dict(obj.get("franchise")) if obj.get("franchise") is not None else None,
            "tier": Tier.from_dict(obj.get("tier")) if obj.get("tier") is not None else None
        })
        return _obj


