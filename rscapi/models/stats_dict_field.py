# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from rscapi.models.team_game_list_results_field import TeamGameListResultsField

class StatsDictField(BaseModel):
    """
    StatsDictField
    """
    blue: TeamGameListResultsField = Field(...)
    orange: TeamGameListResultsField = Field(...)
    __properties = ["blue", "orange"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StatsDictField:
        """Create an instance of StatsDictField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of blue
        if self.blue:
            _dict['blue'] = self.blue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of orange
        if self.orange:
            _dict['orange'] = self.orange.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StatsDictField:
        """Create an instance of StatsDictField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StatsDictField.parse_obj(obj)

        _obj = StatsDictField.parse_obj({
            "blue": TeamGameListResultsField.from_dict(obj.get("blue")) if obj.get("blue") is not None else None,
            "orange": TeamGameListResultsField.from_dict(obj.get("orange")) if obj.get("orange") is not None else None
        })
        return _obj


