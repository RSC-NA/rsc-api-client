# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, constr
from openapi_client.models.league import League

class ElevatedRole(BaseModel):
    """
    ElevatedRole
    """
    league: League = Field(...)
    position: constr(strict=True, min_length=1) = Field(...)
    gm: Optional[StrictBool] = None
    agm: Optional[StrictBool] = None
    arbiter: Optional[StrictBool] = None
    project_role: Optional[constr(strict=True, min_length=1)] = None
    __properties = ["league", "position", "gm", "agm", "arbiter", "project_role"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ElevatedRole:
        """Create an instance of ElevatedRole from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "gm",
                            "agm",
                            "arbiter",
                            "project_role",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of league
        if self.league:
            _dict['league'] = self.league.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ElevatedRole:
        """Create an instance of ElevatedRole from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ElevatedRole.parse_obj(obj)

        _obj = ElevatedRole.parse_obj({
            "league": League.from_dict(obj.get("league")) if obj.get("league") is not None else None,
            "position": obj.get("position"),
            "gm": obj.get("gm"),
            "agm": obj.get("agm"),
            "arbiter": obj.get("arbiter"),
            "project_role": obj.get("project_role")
        })
        return _obj


