# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class MasterContracts(BaseModel):
    """
    MasterContracts
    """ # noqa: E501
    active: StrictBool
    rsc_id: Annotated[str, Field(min_length=1, strict=True)]
    name: Annotated[str, Field(min_length=1, strict=True)]
    franchise: Optional[StrictStr] = None
    contract_length: Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]
    current_mmr: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    status: Optional[StrictStr] = None
    base_mmr: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    team_name: Optional[StrictStr] = None
    waiver_period_end_date: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["active", "rsc_id", "name", "franchise", "contract_length", "current_mmr", "status", "base_mmr", "team_name", "waiver_period_end_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MasterContracts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "franchise",
            "status",
            "team_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if waiver_period_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.waiver_period_end_date is None and "waiver_period_end_date" in self.model_fields_set:
            _dict['waiver_period_end_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MasterContracts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "rsc_id": obj.get("rsc_id"),
            "name": obj.get("name"),
            "franchise": obj.get("franchise"),
            "contract_length": obj.get("contract_length"),
            "current_mmr": obj.get("current_mmr"),
            "status": obj.get("status"),
            "base_mmr": obj.get("base_mmr"),
            "team_name": obj.get("team_name"),
            "waiver_period_end_date": obj.get("waiver_period_end_date")
        })
        return _obj


