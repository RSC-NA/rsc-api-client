# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, conint, constr

class FranchiseStandings(BaseModel):
    """
    FranchiseStandings
    """
    franchise: constr(strict=True, min_length=1) = Field(...)
    gm: constr(strict=True, min_length=1) = Field(...)
    wins: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    losses: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    win_percentage: Optional[Union[StrictFloat, StrictInt]] = None
    franchise_standings_rank: StrictInt = Field(...)
    __properties = ["franchise", "gm", "wins", "losses", "win_percentage", "franchise_standings_rank"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FranchiseStandings:
        """Create an instance of FranchiseStandings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FranchiseStandings:
        """Create an instance of FranchiseStandings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FranchiseStandings.parse_obj(obj)

        _obj = FranchiseStandings.parse_obj({
            "franchise": obj.get("franchise"),
            "gm": obj.get("gm"),
            "wins": obj.get("wins"),
            "losses": obj.get("losses"),
            "win_percentage": obj.get("win_percentage"),
            "franchise_standings_rank": obj.get("franchise_standings_rank")
        })
        return _obj


