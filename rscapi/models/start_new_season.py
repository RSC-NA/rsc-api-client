# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class StartNewSeason(BaseModel):
    """
    Endpoint to start new season for a given league  # noqa: E501
    """
    start_date: StrictStr = Field(..., description="Season start date")
    end_date: StrictStr = Field(..., description="Season end date")
    regular_season_start: StrictStr = Field(..., description="When Regular season starts")
    signups_close: StrictStr = Field(..., description="When signups close.")
    preseason_start_date: StrictStr = Field(..., description="When the preseason starts")
    draft_date: StrictStr = Field(..., description="Planned draft night")
    __properties = ["start_date", "end_date", "regular_season_start", "signups_close", "preseason_start_date", "draft_date"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StartNewSeason:
        """Create an instance of StartNewSeason from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StartNewSeason:
        """Create an instance of StartNewSeason from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StartNewSeason.parse_obj(obj)

        _obj = StartNewSeason.parse_obj({
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "regular_season_start": obj.get("regular_season_start"),
            "signups_close": obj.get("signups_close"),
            "preseason_start_date": obj.get("preseason_start_date"),
            "draft_date": obj.get("draft_date")
        })
        return _obj


