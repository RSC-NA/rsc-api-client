# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, constr
from rscapi.models.franchise_gm import FranchiseGM
from rscapi.models.franchise_league import FranchiseLeague
from rscapi.models.franchise_tier import FranchiseTier
from rscapi.models.team import Team

class Franchise(BaseModel):
    """
    Franchise
    """
    name: constr(strict=True, min_length=1) = Field(...)
    prefix: constr(strict=True, max_length=3, min_length=1) = Field(...)
    gm: FranchiseGM = Field(...)
    id: Optional[StrictInt] = None
    league: FranchiseLeague = Field(...)
    tiers: Optional[conlist(FranchiseTier)] = None
    active: Optional[StrictBool] = None
    teams: Optional[conlist(Team)] = None
    logo: Optional[StrictStr] = None
    __properties = ["name", "prefix", "gm", "id", "league", "tiers", "active", "teams", "logo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Franchise:
        """Create an instance of Franchise from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "tiers",
                            "active",
                            "teams",
                            "logo",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of gm
        if self.gm:
            _dict['gm'] = self.gm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of league
        if self.league:
            _dict['league'] = self.league.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tiers (list)
        _items = []
        if self.tiers:
            for _item in self.tiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in teams (list)
        _items = []
        if self.teams:
            for _item in self.teams:
                if _item:
                    _items.append(_item.to_dict())
            _dict['teams'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Franchise:
        """Create an instance of Franchise from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Franchise.parse_obj(obj)

        _obj = Franchise.parse_obj({
            "name": obj.get("name"),
            "prefix": obj.get("prefix"),
            "gm": FranchiseGM.from_dict(obj.get("gm")) if obj.get("gm") is not None else None,
            "id": obj.get("id"),
            "league": FranchiseLeague.from_dict(obj.get("league")) if obj.get("league") is not None else None,
            "tiers": [FranchiseTier.from_dict(_item) for _item in obj.get("tiers")] if obj.get("tiers") is not None else None,
            "active": obj.get("active"),
            "teams": [Team.from_dict(_item) for _item in obj.get("teams")] if obj.get("teams") is not None else None,
            "logo": obj.get("logo")
        })
        return _obj


