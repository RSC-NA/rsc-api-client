# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from openapi_client.models.team import Team

class Game(BaseModel):
    """
    Game
    """
    winner: Team = Field(...)
    forfeit: Optional[StrictBool] = None
    replay_id: Optional[StrictStr] = None
    raw_stats: Dict[str, Any] = Field(...)
    __properties = ["winner", "forfeit", "replay_id", "raw_stats"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Game:
        """Create an instance of Game from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "forfeit",
                            "replay_id",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of winner
        if self.winner:
            _dict['winner'] = self.winner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Game:
        """Create an instance of Game from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Game.parse_obj(obj)

        _obj = Game.parse_obj({
            "winner": Team.from_dict(obj.get("winner")) if obj.get("winner") is not None else None,
            "forfeit": obj.get("forfeit"),
            "replay_id": obj.get("replay_id"),
            "raw_stats": obj.get("raw_stats")
        })
        return _obj


