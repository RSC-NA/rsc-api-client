# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist, constr
from rscapi.models.league_data import LeagueData
from rscapi.models.tier import Tier

class League(BaseModel):
    """
    League
    """
    id: Optional[StrictInt] = None
    name: constr(strict=True, min_length=1) = Field(...)
    guild_id: StrictInt = Field(...)
    league_data: LeagueData = Field(...)
    tiers: conlist(Tier) = Field(...)
    __properties = ["id", "name", "guild_id", "league_data", "tiers"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> League:
        """Create an instance of League from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of league_data
        if self.league_data:
            _dict['league_data'] = self.league_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tiers (list)
        _items = []
        if self.tiers:
            for _item in self.tiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> League:
        """Create an instance of League from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return League.parse_obj(obj)

        _obj = League.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "guild_id": obj.get("guild_id"),
            "league_data": LeagueData.from_dict(obj.get("league_data")) if obj.get("league_data") is not None else None,
            "tiers": [Tier.from_dict(_item) for _item in obj.get("tiers")] if obj.get("tiers") is not None else None
        })
        return _obj


