# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, constr

class PreviousTeam(BaseModel):
    """
    PreviousTeam
    """
    team: Optional[StrictInt] = None
    sign_date: Optional[datetime] = None
    release_date: Optional[datetime] = None
    player: constr(strict=True, min_length=1) = Field(...)
    __properties = ["team", "sign_date", "release_date", "player"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PreviousTeam:
        """Create an instance of PreviousTeam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "team",
                            "sign_date",
                            "release_date",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PreviousTeam:
        """Create an instance of PreviousTeam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PreviousTeam.parse_obj(obj)

        _obj = PreviousTeam.parse_obj({
            "team": obj.get("team"),
            "sign_date": obj.get("sign_date"),
            "release_date": obj.get("release_date"),
            "player": obj.get("player")
        })
        return _obj


