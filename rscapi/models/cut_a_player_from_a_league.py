# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt

class CutAPlayerFromALeague(BaseModel):
    """
    Cuts a player from their team in a given league.  # noqa: E501
    """
    player: StrictInt = Field(..., description="Specific player to perform transaction on.")
    league: StrictInt = Field(..., description="ID of the league transaction is for.")
    executor: StrictInt = Field(..., description="Discord ID of specific member who ran the transaction.")
    admin_override: Optional[StrictBool] = Field(None, description="Boolean indicating whether or not an admin is overriding this command.")
    __properties = ["player", "league", "executor", "admin_override"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CutAPlayerFromALeague:
        """Create an instance of CutAPlayerFromALeague from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CutAPlayerFromALeague:
        """Create an instance of CutAPlayerFromALeague from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CutAPlayerFromALeague.parse_obj(obj)

        _obj = CutAPlayerFromALeague.parse_obj({
            "player": obj.get("player"),
            "league": obj.get("league"),
            "executor": obj.get("executor"),
            "admin_override": obj.get("admin_override")
        })
        return _obj


