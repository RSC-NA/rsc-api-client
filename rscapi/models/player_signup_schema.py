# coding: utf-8

"""
    RSC API Docs

    RSC API Documentation

    The version of the OpenAPI document: v1
    Contact: contact@snippets.local
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator

class PlayerSignupSchema(BaseModel):
    """
    Request body object containing league player signup data.  # noqa: E501
    """
    league: StrictInt = Field(..., description="League of team player will be captain in")
    tracker_links: conlist(StrictStr) = Field(..., description="List of players tracker links")
    rsc_name: StrictStr = Field(..., description="Discord display name of player")
    accepted_rules: StrictBool = Field(..., description="Acknowledgement of player accepting rules")
    accepted_match_nights: StrictBool = Field(..., description="Acknowledgement of player accepting rules")
    platform: StrictStr = Field(..., description="Platform the user plays on.")
    referrer: StrictStr = Field(..., description="Who referred the player")
    new_or_returning: StrictStr = Field(..., description="Is the player new or returning?")
    region_preference: StrictStr = Field(..., description="Players specific region preference")
    admin_override: Optional[StrictBool] = Field(None, description="Admin overriding signup")
    executor: Optional[StrictInt] = Field(None, description="Admin override executor")
    __properties = ["league", "tracker_links", "rsc_name", "accepted_rules", "accepted_match_nights", "platform", "referrer", "new_or_returning", "region_preference", "admin_override", "executor"]

    @validator('platform')
    def platform_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('STEAM', 'EPIC', 'XBOX', 'PS', 'SWTCH'):
            raise ValueError("must be one of enum values ('STEAM', 'EPIC', 'XBOX', 'PS', 'SWTCH')")
        return value

    @validator('referrer')
    def referrer_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('REDDIT', 'TWITCH', 'FRIEND', 'MLE', 'BALLCHASING', 'OTHER'):
            raise ValueError("must be one of enum values ('REDDIT', 'TWITCH', 'FRIEND', 'MLE', 'BALLCHASING', 'OTHER')")
        return value

    @validator('new_or_returning')
    def new_or_returning_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('NEW', 'FORMER'):
            raise ValueError("must be one of enum values ('NEW', 'FORMER')")
        return value

    @validator('region_preference')
    def region_preference_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('EST', 'WST', 'EU'):
            raise ValueError("must be one of enum values ('EST', 'WST', 'EU')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlayerSignupSchema:
        """Create an instance of PlayerSignupSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlayerSignupSchema:
        """Create an instance of PlayerSignupSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlayerSignupSchema.parse_obj(obj)

        _obj = PlayerSignupSchema.parse_obj({
            "league": obj.get("league"),
            "tracker_links": obj.get("tracker_links"),
            "rsc_name": obj.get("rsc_name"),
            "accepted_rules": obj.get("accepted_rules"),
            "accepted_match_nights": obj.get("accepted_match_nights"),
            "platform": obj.get("platform"),
            "referrer": obj.get("referrer"),
            "new_or_returning": obj.get("new_or_returning"),
            "region_preference": obj.get("region_preference"),
            "admin_override": obj.get("admin_override"),
            "executor": obj.get("executor")
        })
        return _obj


